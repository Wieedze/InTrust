import { type BaseConfig, type DnsConfig, baseSchema, dnsSchema } from './env-schema.js';
export interface EnvUpdate {
    key: keyof BaseConfig;
    value: string;
}
interface ReadEnvOptions {
    partial?: boolean;
    schema?: typeof baseSchema | typeof dnsSchema;
}
export declare class EnvManager {
    private filePath;
    constructor(filePath?: string);
    appendNewline(): Promise<void>;
    ensureEnvFile(): Promise<void>;
    exists(): Promise<boolean>;
    getEnvValue<K extends keyof BaseConfig>(key: K, options?: ReadEnvOptions): Promise<BaseConfig[K]>;
    readEnv(options?: ReadEnvOptions): Promise<BaseConfig | DnsConfig | Partial<BaseConfig> | Partial<DnsConfig>>;
    readRawEnv(): Promise<Record<string, string>>;
    updateEnv(updates: EnvUpdate[]): Promise<void>;
}
export {};
