{"version":3,"file":"index.js","sources":["../src/random.ts","../src/image.ts","../src/svg.ts","../src/index.ts"],"sourcesContent":["export function seedRandom(seed: string): () => number {\n  const rseed = randSeed(seed);\n  // based on Javaâ€™s String.hashCode(),\n  // expanded to 4 32bit values\n  return function random(): number {\n    const t = rseed[0] ^ (rseed[0] << 11);\n    rseed[0] = rseed[1];\n    rseed[1] = rseed[2];\n    rseed[2] = rseed[3];\n    rseed[3] = rseed[3] ^ (rseed[3] >> 19) ^ t ^ (t >> 8);\n    return (rseed[3] >>> 0) / (1 << 31 >>> 0);\n  };\n}\n\nfunction randSeed(seed: string): Uint32Array {\n  // Xorshift: [x, y, z, w] 32 bit values\n  const rseed = new Uint32Array([0, 0, 0, 0]);\n  for (let i = 0; i < seed.length; i++) {\n    rseed[i % 4] = (rseed[i % 4] << 5) - rseed[i % 4] + seed.charCodeAt(i);\n  }\n  return rseed;\n}\n","import type { Address, BloImage, BloImageData, Hsl, PaletteIndex } from \"./types\";\n\nimport { seedRandom } from \"./random\";\n\n// The random() calls must happen in this exact order:\n// 1. palette: main color (6 calls)\n// 2. palette: background (6 calls)\n// 3. palette: spot color (6 calls)\n// 4. image data (32 calls)\n\nexport function image(address: Address): BloImage {\n  const random = seedRandom(address.toLowerCase());\n  const palette = randomPalette(random);\n  const data = randomImageData(random);\n  return [data, palette];\n}\n\nexport function randomImageData(random: () => number): BloImageData {\n  const data = new Uint8Array(32);\n  for (let i = 0; i < 32; i++) {\n    data[i] = Math.floor(\n      // background: 43% chances\n      // color:      43% chances\n      // spot:       13% chances\n      random() * 2.3,\n    ) as PaletteIndex; // guaranteed to be 0 | 1 | 2\n  }\n  return data;\n}\n\nexport function randomPalette(random: () => number): [Hsl, Hsl, Hsl] {\n  // calls order is significant\n  const c = randomColor(random);\n  const b = randomColor(random);\n  const s = randomColor(random);\n  return [b, c, s];\n}\n\nexport function randomColor(rand: () => number): Hsl {\n  // Math.floor() calls omitted since Uint16Array() does it\n  return new Uint16Array([\n    // hue = 0 to 360 (whole color spectrum)\n    rand() * 360,\n    // saturation = 40 to 100 (avoid greyish colors)\n    40 + rand() * 60,\n    // lightness = 0 to 100 but probabilities are a bell curve around 50%\n    (rand() + rand() + rand() + rand()) * 25,\n  ]);\n}\n","import type { Address } from \"./types\";\n\nimport { randomPalette } from \"./image\";\nimport { seedRandom } from \"./random\";\n\nconst SVG_START = `<svg `\n  + `xmlns=\"http://www.w3.org/2000/svg\" `\n  + `viewBox=\"0 0 8 8\" `\n  + `shape-rendering=\"optimizeSpeed\" `; // optimizeSpeed stays sharp thanks to using <path />\n\nexport function svg(address: Address, size: number) {\n  const random = seedRandom(address.toLowerCase());\n\n  const [b, c, s] = randomPalette(random);\n\n  const paths = [\n    `M0,0H8V8H0z`, // background\n    ``, // color\n    ``, // spot\n  ];\n\n  for (let i = 0, x, y; i < 32; i++) {\n    x = i % 4;\n    y = Math.floor(i / 4);\n    const colorIndex = Math.floor(random() * 2.3);\n    if (colorIndex > 0) {\n      paths[colorIndex] += `M${x},${y}h1v1h-1zM${7 - x},${y}h1v1h-1z`;\n    }\n  }\n\n  return `${SVG_START}width=\"${size}\" height=\"${size}\">`\n    + `<path fill=\"hsl(${b[0]} ${b[1]}% ${b[2]}%)\" d=\"${paths[0]}\"/>`\n    + `<path fill=\"hsl(${c[0]} ${c[1]}% ${c[2]}%)\" d=\"${paths[1]}\"/>`\n    + `<path fill=\"hsl(${s[0]} ${s[1]}% ${s[2]}%)\" d=\"${paths[2]}\"/>`\n    + \"</svg>\";\n}\n","import type { Address, BloImage } from \"./types\";\n\nimport { image } from \"./image\";\nimport { svg } from \"./svg\";\n\nexport type {\n  Address,\n  BloImage,\n  BloImageData,\n  Hsl,\n  Palette,\n  PaletteIndex,\n} from \"./types\";\n\nexport function blo(address: Address, size: number = 64): string {\n  return \"data:image/svg+xml;base64,\" + btoa(bloSvg(address, size));\n}\n\nexport function bloSvg(address: Address, size: number = 64): string {\n  return svg(address, size);\n}\n\nexport function bloImage(address: Address): BloImage {\n  return image(address);\n}\n"],"names":["seedRandom","seed","rseed","randSeed","t","i","image","address","random","palette","randomPalette","randomImageData","data","c","randomColor","b","s","rand","SVG_START","svg","size","paths","x","y","colorIndex","blo","bloSvg","bloImage"],"mappings":"AAAO,SAASA,EAAWC,GAA4B;AAC/C,QAAAC,IAAQC,EAASF,CAAI;AAG3B,SAAO,WAA0B;AAC/B,UAAMG,IAAIF,EAAM,CAAC,IAAKA,EAAM,CAAC,KAAK;AAC5B,WAAAA,EAAA,CAAC,IAAIA,EAAM,CAAC,GACZA,EAAA,CAAC,IAAIA,EAAM,CAAC,GACZA,EAAA,CAAC,IAAIA,EAAM,CAAC,GACZA,EAAA,CAAC,IAAIA,EAAM,CAAC,IAAKA,EAAM,CAAC,KAAK,KAAME,IAAKA,KAAK,IAC3CF,EAAM,CAAC,MAAM,MAAM,KAAK,OAAO;AAAA,EAAA;AAE3C;AAEA,SAASC,EAASF,GAA2B;AAErC,QAAAC,IAAQ,IAAI,YAAY,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;AAC1C,WAASG,IAAI,GAAGA,IAAIJ,EAAK,QAAQI;AAC/B,IAAAH,EAAMG,IAAI,CAAC,KAAKH,EAAMG,IAAI,CAAC,KAAK,KAAKH,EAAMG,IAAI,CAAC,IAAIJ,EAAK,WAAWI,CAAC;AAEhE,SAAAH;AACT;ACXO,SAASI,EAAMC,GAA4B;AAChD,QAAMC,IAASR,EAAWO,EAAQ,YAAa,CAAA,GACzCE,IAAUC,EAAcF,CAAM;AAE7B,SAAA,CADMG,EAAgBH,CAAM,GACrBC,CAAO;AACvB;AAEO,SAASE,EAAgBH,GAAoC;AAC5D,QAAAI,IAAO,IAAI,WAAW,EAAE;AAC9B,WAASP,IAAI,GAAGA,IAAI,IAAIA;AACjB,IAAAO,EAAAP,CAAC,IAAI,KAAK;AAAA;AAAA;AAAA;AAAA,MAIbG,EAAW,IAAA;AAAA,IAAA;AAGR,SAAAI;AACT;AAEO,SAASF,EAAcF,GAAuC;AAE7D,QAAAK,IAAIC,EAAYN,CAAM,GACtBO,IAAID,EAAYN,CAAM,GACtBQ,IAAIF,EAAYN,CAAM;AACrB,SAAA,CAACO,GAAGF,GAAGG,CAAC;AACjB;AAEO,SAASF,EAAYG,GAAyB;AAEnD,SAAO,IAAI,YAAY;AAAA;AAAA,IAErBA,EAAS,IAAA;AAAA;AAAA,IAET,KAAKA,MAAS;AAAA;AAAA,KAEbA,EAAS,IAAAA,EAAA,IAASA,EAAK,IAAIA,OAAU;AAAA,EAAA,CACvC;AACH;AC3CA,MAAMC,IAAY;AAKF,SAAAC,EAAIZ,GAAkBa,GAAc;AAClD,QAAMZ,IAASR,EAAWO,EAAQ,YAAa,CAAA,GAEzC,CAACQ,GAAGF,GAAGG,CAAC,IAAIN,EAAcF,CAAM,GAEhCa,IAAQ;AAAA,IACZ;AAAA;AAAA,IACA;AAAA;AAAA,IACA;AAAA;AAAA,EAAA;AAGF,WAAShB,IAAI,GAAGiB,GAAGC,GAAGlB,IAAI,IAAIA,KAAK;AACjC,IAAAiB,IAAIjB,IAAI,GACJkB,IAAA,KAAK,MAAMlB,IAAI,CAAC;AACpB,UAAMmB,IAAa,KAAK,MAAMhB,MAAW,GAAG;AAC5C,IAAIgB,IAAa,MACTH,EAAAG,CAAU,KAAK,IAAIF,CAAC,IAAIC,CAAC,YAAY,IAAID,CAAC,IAAIC,CAAC;AAAA,EAEzD;AAEO,SAAA,GAAGL,CAAS,UAAUE,CAAI,aAAaA,CAAI,qBAC3BL,EAAE,CAAC,CAAC,IAAIA,EAAE,CAAC,CAAC,KAAKA,EAAE,CAAC,CAAC,UAAUM,EAAM,CAAC,CAAC,sBACvCR,EAAE,CAAC,CAAC,IAAIA,EAAE,CAAC,CAAC,KAAKA,EAAE,CAAC,CAAC,UAAUQ,EAAM,CAAC,CAAC,sBACvCL,EAAE,CAAC,CAAC,IAAIA,EAAE,CAAC,CAAC,KAAKA,EAAE,CAAC,CAAC,UAAUK,EAAM,CAAC,CAAC;AAEhE;ACrBgB,SAAAI,EAAIlB,GAAkBa,IAAe,IAAY;AAC/D,SAAO,+BAA+B,KAAKM,EAAOnB,GAASa,CAAI,CAAC;AAClE;AAEgB,SAAAM,EAAOnB,GAAkBa,IAAe,IAAY;AAC3D,SAAAD,EAAIZ,GAASa,CAAI;AAC1B;AAEO,SAASO,EAASpB,GAA4B;AACnD,SAAOD,EAAMC,CAAO;AACtB;"}