{"version":3,"file":"index.cjs","sources":["../src/random.ts","../src/image.ts","../src/svg.ts","../src/index.ts"],"sourcesContent":["export function seedRandom(seed: string): () => number {\n  const rseed = randSeed(seed);\n  // based on Javaâ€™s String.hashCode(),\n  // expanded to 4 32bit values\n  return function random(): number {\n    const t = rseed[0] ^ (rseed[0] << 11);\n    rseed[0] = rseed[1];\n    rseed[1] = rseed[2];\n    rseed[2] = rseed[3];\n    rseed[3] = rseed[3] ^ (rseed[3] >> 19) ^ t ^ (t >> 8);\n    return (rseed[3] >>> 0) / (1 << 31 >>> 0);\n  };\n}\n\nfunction randSeed(seed: string): Uint32Array {\n  // Xorshift: [x, y, z, w] 32 bit values\n  const rseed = new Uint32Array([0, 0, 0, 0]);\n  for (let i = 0; i < seed.length; i++) {\n    rseed[i % 4] = (rseed[i % 4] << 5) - rseed[i % 4] + seed.charCodeAt(i);\n  }\n  return rseed;\n}\n","import type { Address, BloImage, BloImageData, Hsl, PaletteIndex } from \"./types\";\n\nimport { seedRandom } from \"./random\";\n\n// The random() calls must happen in this exact order:\n// 1. palette: main color (6 calls)\n// 2. palette: background (6 calls)\n// 3. palette: spot color (6 calls)\n// 4. image data (32 calls)\n\nexport function image(address: Address): BloImage {\n  const random = seedRandom(address.toLowerCase());\n  const palette = randomPalette(random);\n  const data = randomImageData(random);\n  return [data, palette];\n}\n\nexport function randomImageData(random: () => number): BloImageData {\n  const data = new Uint8Array(32);\n  for (let i = 0; i < 32; i++) {\n    data[i] = Math.floor(\n      // background: 43% chances\n      // color:      43% chances\n      // spot:       13% chances\n      random() * 2.3,\n    ) as PaletteIndex; // guaranteed to be 0 | 1 | 2\n  }\n  return data;\n}\n\nexport function randomPalette(random: () => number): [Hsl, Hsl, Hsl] {\n  // calls order is significant\n  const c = randomColor(random);\n  const b = randomColor(random);\n  const s = randomColor(random);\n  return [b, c, s];\n}\n\nexport function randomColor(rand: () => number): Hsl {\n  // Math.floor() calls omitted since Uint16Array() does it\n  return new Uint16Array([\n    // hue = 0 to 360 (whole color spectrum)\n    rand() * 360,\n    // saturation = 40 to 100 (avoid greyish colors)\n    40 + rand() * 60,\n    // lightness = 0 to 100 but probabilities are a bell curve around 50%\n    (rand() + rand() + rand() + rand()) * 25,\n  ]);\n}\n","import type { Address } from \"./types\";\n\nimport { randomPalette } from \"./image\";\nimport { seedRandom } from \"./random\";\n\nconst SVG_START = `<svg `\n  + `xmlns=\"http://www.w3.org/2000/svg\" `\n  + `viewBox=\"0 0 8 8\" `\n  + `shape-rendering=\"optimizeSpeed\" `; // optimizeSpeed stays sharp thanks to using <path />\n\nexport function svg(address: Address, size: number) {\n  const random = seedRandom(address.toLowerCase());\n\n  const [b, c, s] = randomPalette(random);\n\n  const paths = [\n    `M0,0H8V8H0z`, // background\n    ``, // color\n    ``, // spot\n  ];\n\n  for (let i = 0, x, y; i < 32; i++) {\n    x = i % 4;\n    y = Math.floor(i / 4);\n    const colorIndex = Math.floor(random() * 2.3);\n    if (colorIndex > 0) {\n      paths[colorIndex] += `M${x},${y}h1v1h-1zM${7 - x},${y}h1v1h-1z`;\n    }\n  }\n\n  return `${SVG_START}width=\"${size}\" height=\"${size}\">`\n    + `<path fill=\"hsl(${b[0]} ${b[1]}% ${b[2]}%)\" d=\"${paths[0]}\"/>`\n    + `<path fill=\"hsl(${c[0]} ${c[1]}% ${c[2]}%)\" d=\"${paths[1]}\"/>`\n    + `<path fill=\"hsl(${s[0]} ${s[1]}% ${s[2]}%)\" d=\"${paths[2]}\"/>`\n    + \"</svg>\";\n}\n","import type { Address, BloImage } from \"./types\";\n\nimport { image } from \"./image\";\nimport { svg } from \"./svg\";\n\nexport type {\n  Address,\n  BloImage,\n  BloImageData,\n  Hsl,\n  Palette,\n  PaletteIndex,\n} from \"./types\";\n\nexport function blo(address: Address, size: number = 64): string {\n  return \"data:image/svg+xml;base64,\" + btoa(bloSvg(address, size));\n}\n\nexport function bloSvg(address: Address, size: number = 64): string {\n  return svg(address, size);\n}\n\nexport function bloImage(address: Address): BloImage {\n  return image(address);\n}\n"],"names":["seedRandom","seed","rseed","randSeed","t","i","image","address","random","palette","randomPalette","randomImageData","data","c","randomColor","b","s","rand","SVG_START","svg","size","paths","x","y","colorIndex","blo","bloSvg","bloImage"],"mappings":"gFAAO,SAASA,EAAWC,EAA4B,CAC/C,MAAAC,EAAQC,EAASF,CAAI,EAG3B,OAAO,UAA0B,CAC/B,MAAMG,EAAIF,EAAM,CAAC,EAAKA,EAAM,CAAC,GAAK,GAC5B,OAAAA,EAAA,CAAC,EAAIA,EAAM,CAAC,EACZA,EAAA,CAAC,EAAIA,EAAM,CAAC,EACZA,EAAA,CAAC,EAAIA,EAAM,CAAC,EACZA,EAAA,CAAC,EAAIA,EAAM,CAAC,EAAKA,EAAM,CAAC,GAAK,GAAME,EAAKA,GAAK,GAC3CF,EAAM,CAAC,IAAM,IAAM,GAAK,KAAO,EAAA,CAE3C,CAEA,SAASC,EAASF,EAA2B,CAErC,MAAAC,EAAQ,IAAI,YAAY,CAAC,EAAG,EAAG,EAAG,CAAC,CAAC,EAC1C,QAASG,EAAI,EAAGA,EAAIJ,EAAK,OAAQI,IAC/BH,EAAMG,EAAI,CAAC,GAAKH,EAAMG,EAAI,CAAC,GAAK,GAAKH,EAAMG,EAAI,CAAC,EAAIJ,EAAK,WAAWI,CAAC,EAEhE,OAAAH,CACT,CCXO,SAASI,EAAMC,EAA4B,CAChD,MAAMC,EAASR,EAAWO,EAAQ,YAAa,CAAA,EACzCE,EAAUC,EAAcF,CAAM,EAE7B,MAAA,CADMG,EAAgBH,CAAM,EACrBC,CAAO,CACvB,CAEO,SAASE,EAAgBH,EAAoC,CAC5D,MAAAI,EAAO,IAAI,WAAW,EAAE,EAC9B,QAASP,EAAI,EAAGA,EAAI,GAAIA,IACjBO,EAAAP,CAAC,EAAI,KAAK,MAIbG,EAAW,EAAA,GAAA,EAGR,OAAAI,CACT,CAEO,SAASF,EAAcF,EAAuC,CAE7D,MAAAK,EAAIC,EAAYN,CAAM,EACtBO,EAAID,EAAYN,CAAM,EACtBQ,EAAIF,EAAYN,CAAM,EACrB,MAAA,CAACO,EAAGF,EAAGG,CAAC,CACjB,CAEO,SAASF,EAAYG,EAAyB,CAEnD,OAAO,IAAI,YAAY,CAErBA,EAAS,EAAA,IAET,GAAKA,IAAS,IAEbA,EAAS,EAAAA,EAAA,EAASA,EAAK,EAAIA,KAAU,EAAA,CACvC,CACH,CC3CA,MAAMC,EAAY,6FAKF,SAAAC,EAAIZ,EAAkBa,EAAc,CAClD,MAAMZ,EAASR,EAAWO,EAAQ,YAAa,CAAA,EAEzC,CAACQ,EAAGF,EAAGG,CAAC,EAAIN,EAAcF,CAAM,EAEhCa,EAAQ,CACZ,cACA,GACA,EAAA,EAGF,QAAShB,EAAI,EAAGiB,EAAGC,EAAGlB,EAAI,GAAIA,IAAK,CACjCiB,EAAIjB,EAAI,EACJkB,EAAA,KAAK,MAAMlB,EAAI,CAAC,EACpB,MAAMmB,EAAa,KAAK,MAAMhB,IAAW,GAAG,EACxCgB,EAAa,IACTH,EAAAG,CAAU,GAAK,IAAIF,CAAC,IAAIC,CAAC,YAAY,EAAID,CAAC,IAAIC,CAAC,WAEzD,CAEO,MAAA,GAAGL,CAAS,UAAUE,CAAI,aAAaA,CAAI,qBAC3BL,EAAE,CAAC,CAAC,IAAIA,EAAE,CAAC,CAAC,KAAKA,EAAE,CAAC,CAAC,UAAUM,EAAM,CAAC,CAAC,sBACvCR,EAAE,CAAC,CAAC,IAAIA,EAAE,CAAC,CAAC,KAAKA,EAAE,CAAC,CAAC,UAAUQ,EAAM,CAAC,CAAC,sBACvCL,EAAE,CAAC,CAAC,IAAIA,EAAE,CAAC,CAAC,KAAKA,EAAE,CAAC,CAAC,UAAUK,EAAM,CAAC,CAAC,WAEhE,CCrBgB,SAAAI,EAAIlB,EAAkBa,EAAe,GAAY,CAC/D,MAAO,6BAA+B,KAAKM,EAAOnB,EAASa,CAAI,CAAC,CAClE,CAEgB,SAAAM,EAAOnB,EAAkBa,EAAe,GAAY,CAC3D,OAAAD,EAAIZ,EAASa,CAAI,CAC1B,CAEO,SAASO,EAASpB,EAA4B,CACnD,OAAOD,EAAMC,CAAO,CACtB"}