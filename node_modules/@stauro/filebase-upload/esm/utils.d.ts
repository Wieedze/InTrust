import aws4 from 'aws4';
import { Buffer } from 'node:buffer';
import type { RequiredArgs } from './types.js';
import type { AwsCredentialIdentity, HttpRequest as IHttpRequest, QueryParameterBag } from '@smithy/types';
export declare const parseUrl: (url: string | URL) => Pick<IHttpRequest, "hostname" | "port" | "protocol" | "path" | "query">;
export declare const generateFilebaseRequestOptions: (token: string, requestOptions: aws4.Request & {
    key?: string;
}) => aws4.Request & {
    key?: string;
};
export declare const toUint8Array: (data: string | ArrayBuffer | ArrayBufferView) => Uint8Array;
export declare const buildQueryString: (query: QueryParameterBag) => string;
export declare const castSourceData: (toCast: string | Buffer | ArrayBuffer, encoding?: NodeJS.BufferEncoding) => Buffer;
export declare const formatUrl: (request: Omit<IHttpRequest, "headers" | "method">) => string;
export declare const fromEnv: (filebaseToken: string) => () => AwsCredentialIdentity;
export declare const createBucket: ({ bucketName, apiUrl, token }: RequiredArgs) => Promise<boolean>;
export declare function presignRequest(request: IHttpRequest, { accessKeyId, secretAccessKey, region, expiresIn, }: {
    accessKeyId: string;
    secretAccessKey: string;
    region: string;
    expiresIn?: number;
}): IHttpRequest;
//# sourceMappingURL=utils.d.ts.map