{
  "address": "0xbab02368889f73ebBC506F7482b203195c48783E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minStakeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockPeriod",
          "type": "uint256"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRewardRate",
          "type": "uint256"
        }
      ],
      "name": "PoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minStakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockPeriod",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getPoolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minStakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockPeriod",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserStakeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "canUnstake",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "minStakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newRewardRate",
          "type": "uint256"
        }
      ],
      "name": "updateRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc489bbf92c1f51f3c33a17aa786e44fe13227938ab5401e0207611569d46cc59",
  "receipt": {
    "to": null,
    "from": "0x0B940A81271aD090AbD2C18d1a5873e5cb93D42a",
    "contractAddress": "0xbab02368889f73ebBC506F7482b203195c48783E",
    "transactionIndex": 1,
    "gasUsed": "1167356",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000100000000000000000000000000000000000000000000000000000000000000800000000000000000000000020000000000000000000000100000000000000200000000000000000000000000000",
    "blockHash": "0x6f4f7b63aa9164e1f97e6c1832d1f9516d1e20a665cff7669118fb727db202e8",
    "transactionHash": "0xc489bbf92c1f51f3c33a17aa786e44fe13227938ab5401e0207611569d46cc59",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 1638635,
        "transactionHash": "0xc489bbf92c1f51f3c33a17aa786e44fe13227938ab5401e0207611569d46cc59",
        "address": "0xbab02368889f73ebBC506F7482b203195c48783E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000b940a81271ad090abd2c18d1a5873e5cb93d42a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6f4f7b63aa9164e1f97e6c1832d1f9516d1e20a665cff7669118fb727db202e8"
      }
    ],
    "blockNumber": 1638635,
    "cumulativeGasUsed": "1167356",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bc3a7a8404d0d5dd62c1a78d757835c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minStakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardRate\",\"type\":\"uint256\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canUnstake\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newRewardRate\",\"type\":\"uint256\"}],\"name\":\"updateRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contrat de staking universel pour n'importe quel token ERC20 Chaque token a sa propre pool avec ses param\\u00e8tres personnalisables\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"calculateRewards(address,address)\":{\"details\":\"Calculer les rewards d'un utilisateur pour un token\"},\"claimRewards(address)\":{\"details\":\"Claim rewards (simulation - dans un vrai contrat il faudrait une r\\u00e9serve de tokens)\"},\"createPool(address,uint256,uint256,uint256)\":{\"details\":\"Cr\\u00e9er une nouvelle pool de staking pour un token\"},\"emergencyWithdraw(address,uint256)\":{\"details\":\"Emergency function to recover stuck tokens (only owner)\"},\"getPoolInfo(address)\":{\"details\":\"Obtenir les informations d'une pool\"},\"getSupportedTokens()\":{\"details\":\"Obtenir la liste des tokens support\\u00e9s\"},\"getUserStakeInfo(address,address)\":{\"details\":\"Obtenir les informations de stake d'un utilisateur\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"stake(address,uint256)\":{\"details\":\"Staker des tokens\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(address,uint256)\":{\"details\":\"Unstaker des tokens\"},\"updateRewardRate(address,uint256)\":{\"details\":\"Mettre \\u00e0 jour le reward rate d'une pool\"}},\"title\":\"UniversalStaking\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniversalStaking.sol\":\"UniversalStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/UniversalStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title UniversalStaking\\n * @dev Contrat de staking universel pour n'importe quel token ERC20\\n * Chaque token a sa propre pool avec ses param\\u00e8tres personnalisables\\n */\\ncontract UniversalStaking is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    struct StakeInfo {\\n        uint256 amount;        // Montant stak\\u00e9\\n        uint256 stakeTime;     // Timestamp du stake\\n        uint256 lastRewardTime; // Dernier calcul de rewards\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 token;          // Token \\u00e0 staker\\n        uint256 rewardRate;    // Reward rate (tokens par seconde par token stak\\u00e9)\\n        uint256 totalStaked;   // Total stak\\u00e9 dans cette pool\\n        uint256 lastUpdateTime;// Derni\\u00e8re mise \\u00e0 jour\\n        bool isActive;         // Pool active ou non\\n        uint256 minStakeAmount; // Montant minimum \\u00e0 staker\\n        uint256 lockPeriod;    // P\\u00e9riode de lock en secondes (0 = pas de lock)\\n    }\\n\\n    // Mapping des pools par adresse de token\\n    mapping(address => PoolInfo) public pools;\\n    \\n    // Mapping des stakes: token => user => stake info\\n    mapping(address => mapping(address => StakeInfo)) public stakes;\\n    \\n    // Liste des tokens support\\u00e9s\\n    address[] public supportedTokens;\\n    \\n    // Events\\n    event PoolCreated(address indexed token, uint256 rewardRate, uint256 minStakeAmount, uint256 lockPeriod);\\n    event Staked(address indexed user, address indexed token, uint256 amount);\\n    event Unstaked(address indexed user, address indexed token, uint256 amount);\\n    event RewardsClaimed(address indexed user, address indexed token, uint256 reward);\\n    event PoolUpdated(address indexed token, uint256 newRewardRate);\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    /**\\n     * @dev Cr\\u00e9er une nouvelle pool de staking pour un token\\n     */\\n    function createPool(\\n        address _token,\\n        uint256 _rewardRate,\\n        uint256 _minStakeAmount,\\n        uint256 _lockPeriod\\n    ) external onlyOwner {\\n        require(_token != address(0), \\\"Invalid token address\\\");\\n        require(!pools[_token].isActive, \\\"Pool already exists\\\");\\n\\n        pools[_token] = PoolInfo({\\n            token: IERC20(_token),\\n            rewardRate: _rewardRate,\\n            totalStaked: 0,\\n            lastUpdateTime: block.timestamp,\\n            isActive: true,\\n            minStakeAmount: _minStakeAmount,\\n            lockPeriod: _lockPeriod\\n        });\\n\\n        supportedTokens.push(_token);\\n        emit PoolCreated(_token, _rewardRate, _minStakeAmount, _lockPeriod);\\n    }\\n\\n    /**\\n     * @dev Staker des tokens\\n     */\\n    function stake(address _token, uint256 _amount) external nonReentrant {\\n        require(pools[_token].isActive, \\\"Pool not active\\\");\\n        require(_amount >= pools[_token].minStakeAmount, \\\"Amount below minimum\\\");\\n\\n        PoolInfo storage pool = pools[_token];\\n        StakeInfo storage userStake = stakes[_token][msg.sender];\\n\\n        // Transfer tokens to contract\\n        pool.token.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // Update pool\\n        pool.totalStaked += _amount;\\n        pool.lastUpdateTime = block.timestamp;\\n\\n        // Update user stake\\n        if (userStake.amount > 0) {\\n            // Si l'utilisateur avait d\\u00e9j\\u00e0 des tokens stak\\u00e9s, on calcule ses rewards\\n            userStake.amount += _amount;\\n        } else {\\n            // Premier stake\\n            userStake.amount = _amount;\\n            userStake.stakeTime = block.timestamp;\\n        }\\n        userStake.lastRewardTime = block.timestamp;\\n\\n        emit Staked(msg.sender, _token, _amount);\\n    }\\n\\n    /**\\n     * @dev Unstaker des tokens\\n     */\\n    function unstake(address _token, uint256 _amount) external nonReentrant {\\n        require(pools[_token].isActive, \\\"Pool not active\\\");\\n        \\n        StakeInfo storage userStake = stakes[_token][msg.sender];\\n        require(userStake.amount >= _amount, \\\"Insufficient staked amount\\\");\\n\\n        // V\\u00e9rifier la p\\u00e9riode de lock\\n        PoolInfo storage pool = pools[_token];\\n        if (pool.lockPeriod > 0) {\\n            require(\\n                block.timestamp >= userStake.stakeTime + pool.lockPeriod,\\n                \\\"Tokens still locked\\\"\\n            );\\n        }\\n\\n        // Update pool\\n        pool.totalStaked -= _amount;\\n        pool.lastUpdateTime = block.timestamp;\\n\\n        // Update user stake\\n        userStake.amount -= _amount;\\n        if (userStake.amount == 0) {\\n            userStake.stakeTime = 0;\\n            userStake.lastRewardTime = 0;\\n        }\\n\\n        // Transfer tokens back to user\\n        pool.token.safeTransfer(msg.sender, _amount);\\n\\n        emit Unstaked(msg.sender, _token, _amount);\\n    }\\n\\n    /**\\n     * @dev Calculer les rewards d'un utilisateur pour un token\\n     */\\n    function calculateRewards(address _token, address _user) public view returns (uint256) {\\n        if (!pools[_token].isActive) return 0;\\n        \\n        StakeInfo memory userStake = stakes[_token][_user];\\n        if (userStake.amount == 0) return 0;\\n\\n        PoolInfo memory pool = pools[_token];\\n        \\n        // Temps \\u00e9coul\\u00e9 depuis le dernier calcul de reward\\n        uint256 timeElapsed = block.timestamp - userStake.lastRewardTime;\\n        \\n        // Reward = montant stak\\u00e9 * reward rate * temps \\u00e9coul\\u00e9\\n        return (userStake.amount * pool.rewardRate * timeElapsed) / 1e18;\\n    }\\n\\n    /**\\n     * @dev Claim rewards (simulation - dans un vrai contrat il faudrait une r\\u00e9serve de tokens)\\n     */\\n    function claimRewards(address _token) external nonReentrant {\\n        require(pools[_token].isActive, \\\"Pool not active\\\");\\n        \\n        uint256 reward = calculateRewards(_token, msg.sender);\\n        require(reward > 0, \\\"No rewards to claim\\\");\\n\\n        // Mettre \\u00e0 jour le temps du dernier reward\\n        stakes[_token][msg.sender].lastRewardTime = block.timestamp;\\n\\n        // Dans un vrai contrat, on transf\\u00e9rerait les tokens de reward\\n        // Pour la d\\u00e9mo, on \\u00e9met juste l'\\u00e9v\\u00e9nement\\n        emit RewardsClaimed(msg.sender, _token, reward);\\n    }\\n\\n    /**\\n     * @dev Obtenir les informations d'une pool\\n     */\\n    function getPoolInfo(address _token) external view returns (\\n        uint256 rewardRate,\\n        uint256 totalStaked,\\n        uint256 minStakeAmount,\\n        uint256 lockPeriod,\\n        bool isActive\\n    ) {\\n        PoolInfo memory pool = pools[_token];\\n        return (\\n            pool.rewardRate,\\n            pool.totalStaked,\\n            pool.minStakeAmount,\\n            pool.lockPeriod,\\n            pool.isActive\\n        );\\n    }\\n\\n    /**\\n     * @dev Obtenir les informations de stake d'un utilisateur\\n     */\\n    function getUserStakeInfo(address _token, address _user) external view returns (\\n        uint256 stakedAmount,\\n        uint256 stakeTime,\\n        uint256 pendingRewards,\\n        bool canUnstake\\n    ) {\\n        StakeInfo memory userStake = stakes[_token][_user];\\n        PoolInfo memory pool = pools[_token];\\n        \\n        bool canUnstakeNow = true;\\n        if (pool.lockPeriod > 0 && userStake.stakeTime > 0) {\\n            canUnstakeNow = block.timestamp >= userStake.stakeTime + pool.lockPeriod;\\n        }\\n\\n        return (\\n            userStake.amount,\\n            userStake.stakeTime,\\n            calculateRewards(_token, _user),\\n            canUnstakeNow\\n        );\\n    }\\n\\n    /**\\n     * @dev Mettre \\u00e0 jour le reward rate d'une pool\\n     */\\n    function updateRewardRate(address _token, uint256 _newRewardRate) external onlyOwner {\\n        require(pools[_token].isActive, \\\"Pool not active\\\");\\n        pools[_token].rewardRate = _newRewardRate;\\n        emit PoolUpdated(_token, _newRewardRate);\\n    }\\n\\n    /**\\n     * @dev Obtenir la liste des tokens support\\u00e9s\\n     */\\n    function getSupportedTokens() external view returns (address[] memory) {\\n        return supportedTokens;\\n    }\\n\\n    /**\\n     * @dev Emergency function to recover stuck tokens (only owner)\\n     */\\n    function emergencyWithdraw(address _token, uint256 _amount) external onlyOwner {\\n        IERC20(_token).safeTransfer(owner(), _amount);\\n    }\\n}\",\"keccak256\":\"0x974c5d3a54f76599000f0cb8986ba3bf99f0ecc6927bf01ba9fd3dd0702184aa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ff5760003560e01c8063adc9772e11610097578063d785b59511610066578063d785b59514610372578063ef5cfb8c146103a7578063f0b3adee146103ba578063f2fde38b146103cd57600080fd5b8063adc9772e14610324578063c2a672e014610337578063c62556261461034a578063d3c7c2c71461035d57600080fd5b8063922d3e4c116100d3578063922d3e4c1461020f57806395ccea6714610222578063a4063dbc14610235578063a4e47b66146102cf57600080fd5b8062c9d5091461010457806306bfa9381461012a578063715018a6146101e05780638da5cb5b146101ea575b600080fd5b61011761011236600461110a565b6103e0565b6040519081526020015b60405180910390f35b6101b661013836600461113d565b6001600160a01b03908116600090815260026020818152604092839020835160e0810185528154909516855260018101549185018290529182015492840183905260038201546060850152600482015460ff16151560808501819052600583015460a0860181905260069093015460c0909501859052909492939192565b6040805195865260208601949094529284019190915260608301521515608082015260a001610121565b6101e8610520565b005b6000546001600160a01b03165b6040516001600160a01b039091168152602001610121565b6101e861021d366004611158565b610534565b6101e8610230366004611191565b610714565b61028e61024336600461113d565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006909501546001600160a01b0390941695949293919260ff9091169187565b604080516001600160a01b03909816885260208801969096529486019390935260608501919091521515608084015260a083015260c082015260e001610121565b6103096102dd36600461110a565b600360209081526000928352604080842090915290825290208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610121565b6101e8610332366004611191565b610746565b6101e8610345366004611191565b6108cb565b6101f76103583660046111bb565b610aa0565b610365610aca565b60405161012191906111d4565b61038561038036600461110a565b610b2c565b6040805194855260208501939093529183015215156060820152608001610121565b6101e86103b536600461113d565b610c30565b6101e86103c8366004611191565b610d30565b6101e86103db36600461113d565b610dcf565b6001600160a01b03821660009081526002602052604081206004015460ff1661040b5750600061051a565b6001600160a01b03808416600090815260036020908152604080832093861683529281528282208351606081018552815480825260018301549382019390935260029091015493810193909352900361046857600091505061051a565b6001600160a01b038085166000908152600260208181526040808420815160e08101835281549096168652600181015492860192909252918101548483015260038101546060850152600481015460ff1615156080850152600581015460a08501526006015460c08401528301516104e09042611237565b9050670de0b6b3a76400008183602001518560000151610500919061124a565b61050a919061124a565b6105149190611261565b93505050505b92915050565b610528610e0a565b6105326000610e37565b565b61053c610e0a565b6001600160a01b03841661058f5760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b60448201526064015b60405180910390fd5b6001600160a01b03841660009081526002602052604090206004015460ff16156105f15760405162461bcd60e51b8152602060048201526013602482015272506f6f6c20616c72656164792065786973747360681b6044820152606401610586565b6040805160e0810182526001600160a01b0386811680835260208084018881526000858701818152426060808901918252600160808a0181815260a08b018e815260c08c018e81528a88526002808b528e89209d518e546001600160a01b031990811691909e16178e5598518d8501559551978c0197909755925160038b015591516004808b01805460ff191692151592909217909155945160058a01559151600690980197909755825496870183559190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9094018054909316821790925583518781529182018690529281018490527fc8e774967d7f45e5814dbb800335ed47014999568397f08e79b0f322047f743f910160405180910390a250505050565b61071c610e0a565b6107426107316000546001600160a01b031690565b6001600160a01b0384169083610e87565b5050565b61074e610eeb565b6001600160a01b03821660009081526002602052604090206004015460ff166107895760405162461bcd60e51b815260040161058690611283565b6001600160a01b0382166000908152600260205260409020600501548110156107eb5760405162461bcd60e51b8152602060048201526014602482015273416d6f756e742062656c6f77206d696e696d756d60601b6044820152606401610586565b6001600160a01b03808316600090815260026020908152604080832060038352818420338086529352922082549293909261082a929116903086610f15565b8282600201600082825461083e91906112ac565b909155505042600383015580541561086f578281600001600082825461086491906112ac565b909155506108799050565b8281554260018201555b4260028201556040518381526001600160a01b0385169033907f5dac0c1b1112564a045ba943c9d50270893e8e826c49be8e7073adc713ab7bd7906020015b60405180910390a3505061074260018055565b6108d3610eeb565b6001600160a01b03821660009081526002602052604090206004015460ff1661090e5760405162461bcd60e51b815260040161058690611283565b6001600160a01b0382166000908152600360209081526040808320338452909152902080548211156109825760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74207374616b656420616d6f756e740000000000006044820152606401610586565b6001600160a01b03831660009081526002602052604090206006810154156109fd57806006015482600101546109b891906112ac565b4210156109fd5760405162461bcd60e51b8152602060048201526013602482015272151bdad95b9cc81cdd1a5b1b081b1bd8dad959606a1b6044820152606401610586565b82816002016000828254610a119190611237565b9091555050426003820155815483908390600090610a30908490611237565b90915550508154600003610a4d5760006001830181905560028301555b8054610a63906001600160a01b03163385610e87565b6040518381526001600160a01b0385169033907fd8654fcc8cf5b36d30b3f5e4688fc78118e6d68de60b9994e09902268b57c3e3906020016108b8565b60048181548110610ab057600080fd5b6000918252602090912001546001600160a01b0316905081565b60606004805480602002602001604051908101604052809291908181526020018280548015610b2257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b04575b5050505050905090565b6001600160a01b03808316600081815260036020818152604080842087871685528252808420815160608082018452825482526001808401548387015260029384015483860152978752828552838720845160e0810186528154909a168a5280890154958a019590955291840154928801929092529282015492860192909252600481015460ff1615156080860152600581015460a08601526006015460c08501819052919384938493849392919015801590610bed575060008360200151115b15610c0c578160c001518360200151610c0691906112ac565b42101590505b82516020840151610c1d8b8b6103e0565b919b909a50909850909650945050505050565b610c38610eeb565b6001600160a01b03811660009081526002602052604090206004015460ff16610c735760405162461bcd60e51b815260040161058690611283565b6000610c7f82336103e0565b905060008111610cc75760405162461bcd60e51b81526020600482015260136024820152724e6f207265776172647320746f20636c61696d60681b6044820152606401610586565b6001600160a01b0382166000818152600360209081526040808320338085529083529281902042600290910155518481527f9310ccfcb8de723f578a9e4282ea9f521f05ae40dc08f3068dfad528a65ee3c7910160405180910390a350610d2d60018055565b50565b610d38610e0a565b6001600160a01b03821660009081526002602052604090206004015460ff16610d735760405162461bcd60e51b815260040161058690611283565b6001600160a01b03821660008181526002602052604090819020600101839055517f2f4ae87a584f00dc35b043dd1c5ac839c1f41cd3a66e834d4e13faa6251634e690610dc39084815260200190565b60405180910390a25050565b610dd7610e0a565b6001600160a01b038116610e0157604051631e4fbdf760e01b815260006004820152602401610586565b610d2d81610e37565b6000546001600160a01b031633146105325760405163118cdaa760e01b8152336004820152602401610586565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03838116602483015260448201839052610ee691859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610f54565b505050565b600260015403610f0e57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6040516001600160a01b038481166024830152838116604483015260648201839052610f4e9186918216906323b872dd90608401610eb4565b50505050565b6000610f696001600160a01b03841683610fb7565b90508051600014158015610f8e575080806020019051810190610f8c91906112bf565b155b15610ee657604051635274afe760e01b81526001600160a01b0384166004820152602401610586565b6060610fc583836000610fcc565b9392505050565b606081471015610ff15760405163cd78605960e01b8152306004820152602401610586565b600080856001600160a01b0316848660405161100d91906112e1565b60006040518083038185875af1925050503d806000811461104a576040519150601f19603f3d011682016040523d82523d6000602084013e61104f565b606091505b509150915061105f868383611069565b9695505050505050565b60608261107e57611079826110c5565b610fc5565b815115801561109557506001600160a01b0384163b155b156110be57604051639996b31560e01b81526001600160a01b0385166004820152602401610586565b5080610fc5565b8051156110d55780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b038116811461110557600080fd5b919050565b6000806040838503121561111d57600080fd5b611126836110ee565b9150611134602084016110ee565b90509250929050565b60006020828403121561114f57600080fd5b610fc5826110ee565b6000806000806080858703121561116e57600080fd5b611177856110ee565b966020860135965060408601359560600135945092505050565b600080604083850312156111a457600080fd5b6111ad836110ee565b946020939093013593505050565b6000602082840312156111cd57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156112155783516001600160a01b0316835292840192918401916001016111f0565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561051a5761051a611221565b808202811582820484141761051a5761051a611221565b60008261127e57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600f908201526e506f6f6c206e6f742061637469766560881b604082015260600190565b8082018082111561051a5761051a611221565b6000602082840312156112d157600080fd5b81518015158114610fc557600080fd5b6000825160005b8181101561130257602081860181015185830152016112e8565b50600092019182525091905056fea2646970667358221220e41f52c524e68c8d33544c8160f3fdb06153c125046d0c51419a5d7ae13fe72a64736f6c63430008140033",
  "devdoc": {
    "details": "Contrat de staking universel pour n'importe quel token ERC20 Chaque token a sa propre pool avec ses paramètres personnalisables",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "calculateRewards(address,address)": {
        "details": "Calculer les rewards d'un utilisateur pour un token"
      },
      "claimRewards(address)": {
        "details": "Claim rewards (simulation - dans un vrai contrat il faudrait une réserve de tokens)"
      },
      "createPool(address,uint256,uint256,uint256)": {
        "details": "Créer une nouvelle pool de staking pour un token"
      },
      "emergencyWithdraw(address,uint256)": {
        "details": "Emergency function to recover stuck tokens (only owner)"
      },
      "getPoolInfo(address)": {
        "details": "Obtenir les informations d'une pool"
      },
      "getSupportedTokens()": {
        "details": "Obtenir la liste des tokens supportés"
      },
      "getUserStakeInfo(address,address)": {
        "details": "Obtenir les informations de stake d'un utilisateur"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "stake(address,uint256)": {
        "details": "Staker des tokens"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake(address,uint256)": {
        "details": "Unstaker des tokens"
      },
      "updateRewardRate(address,uint256)": {
        "details": "Mettre à jour le reward rate d'une pool"
      }
    },
    "title": "UniversalStaking",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/UniversalStaking.sol:UniversalStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1523,
        "contract": "contracts/UniversalStaking.sol:UniversalStaking",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1624,
        "contract": "contracts/UniversalStaking.sol:UniversalStaking",
        "label": "pools",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(PoolInfo)1619_storage)"
      },
      {
        "astId": 1631,
        "contract": "contracts/UniversalStaking.sol:UniversalStaking",
        "label": "stakes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(StakeInfo)1603_storage))"
      },
      {
        "astId": 1634,
        "contract": "contracts/UniversalStaking.sol:UniversalStaking",
        "label": "supportedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)877": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(StakeInfo)1603_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct UniversalStaking.StakeInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(StakeInfo)1603_storage)"
      },
      "t_mapping(t_address,t_struct(PoolInfo)1619_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UniversalStaking.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)1619_storage"
      },
      "t_mapping(t_address,t_struct(StakeInfo)1603_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UniversalStaking.StakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeInfo)1603_storage"
      },
      "t_struct(PoolInfo)1619_storage": {
        "encoding": "inplace",
        "label": "struct UniversalStaking.PoolInfo",
        "members": [
          {
            "astId": 1606,
            "contract": "contracts/UniversalStaking.sol:UniversalStaking",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)877"
          },
          {
            "astId": 1608,
            "contract": "contracts/UniversalStaking.sol:UniversalStaking",
            "label": "rewardRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1610,
            "contract": "contracts/UniversalStaking.sol:UniversalStaking",
            "label": "totalStaked",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1612,
            "contract": "contracts/UniversalStaking.sol:UniversalStaking",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1614,
            "contract": "contracts/UniversalStaking.sol:UniversalStaking",
            "label": "isActive",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 1616,
            "contract": "contracts/UniversalStaking.sol:UniversalStaking",
            "label": "minStakeAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1618,
            "contract": "contracts/UniversalStaking.sol:UniversalStaking",
            "label": "lockPeriod",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(StakeInfo)1603_storage": {
        "encoding": "inplace",
        "label": "struct UniversalStaking.StakeInfo",
        "members": [
          {
            "astId": 1598,
            "contract": "contracts/UniversalStaking.sol:UniversalStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1600,
            "contract": "contracts/UniversalStaking.sol:UniversalStaking",
            "label": "stakeTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1602,
            "contract": "contracts/UniversalStaking.sol:UniversalStaking",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}