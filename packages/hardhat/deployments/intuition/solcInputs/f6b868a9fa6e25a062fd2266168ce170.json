{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/Intuit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title INTUIT Token\n * @dev Professional ERC20 token with 1M fixed supply\n * Native-style token for INTUITION Network DEX\n */\ncontract Intuit is ERC20 {\n    \n    /* ========== STATE VARIABLES ========== */\n    \n    uint256 public constant TOTAL_SUPPLY = 1_000_000 * 10**18; // 1M tokens\n    \n    /* ========== EVENTS ========== */\n    \n    event TokensDeployed(address indexed deployer, uint256 totalSupply);\n    \n    /* ========== CONSTRUCTOR ========== */\n    \n    constructor() ERC20(\"INTUIT\", \"INTUIT\") {\n        // Mint 1M tokens to deployer\n        _mint(msg.sender, TOTAL_SUPPLY);\n        emit TokensDeployed(msg.sender, TOTAL_SUPPLY);\n    }\n    \n    /* ========== VIEW FUNCTIONS ========== */\n    \n    /**\n     * @dev Returns the total supply constant\n     */\n    function getTotalSupply() external pure returns (uint256) {\n        return TOTAL_SUPPLY;\n    }\n    \n    /**\n     * @dev Returns token information\n     */\n    function getTokenInfo() external pure returns (\n        string memory tokenName,\n        string memory tokenSymbol,\n        uint256 tokenSupply,\n        uint8 tokenDecimals\n    ) {\n        return (\"INTUIT\", \"INTUIT\", TOTAL_SUPPLY, 18);\n    }\n}\n"
    },
    "contracts/IntuitStaker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./Intuit.sol\";\n\n/**\n * @title IntuitStaker\n * @dev Decentralized staking contract for INTUIT tokens with collective goals\n * \n * Features:\n * - Stake INTUIT tokens to earn rewards\n * - Collective threshold - if reached, rewards are distributed\n * - If threshold not met, users can withdraw their stakes\n * - Integrates with existing INTUIT token ecosystem\n */\ncontract IntuitStaker {\n    \n    /* ========== STATE VARIABLES ========== */\n    \n    Intuit public immutable intuitToken;\n    \n    // Staking parameters\n    uint256 public constant THRESHOLD = 10000 ether; // 10,000 INTUIT tokens needed\n    uint256 public constant REWARD_RATE = 125; // 12.5% APY (125/1000)\n    uint256 public constant LOCK_PERIOD = 7 days;\n    uint256 public constant EARLY_UNSTAKE_FEE = 20; // 2% (20/1000)\n    \n    uint256 public deadline;\n    uint256 public totalStaked;\n    bool public stakingCompleted;\n    bool public openForWithdraw;\n    \n    // User data\n    mapping(address => uint256) public balances;\n    mapping(address => uint256) public stakeTimestamp;\n    mapping(address => uint256) public rewards;\n    \n    // Reward pool (funded by trading fees from DEX)\n    uint256 public rewardPool;\n    \n    /* ========== EVENTS ========== */\n    \n    event Stake(address indexed staker, uint256 amount, uint256 timestamp);\n    event Unstake(address indexed staker, uint256 amount, uint256 fee);\n    event RewardsDistributed(uint256 totalRewards, uint256 totalStakers);\n    event Withdraw(address indexed staker, uint256 amount);\n    event Execute(bool success, uint256 totalStaked);\n    event RewardPoolFunded(uint256 amount);\n    \n    /* ========== CONSTRUCTOR ========== */\n    \n    constructor(address _intuitToken) {\n        require(_intuitToken != address(0), \"IntuitStaker: invalid token address\");\n        intuitToken = Intuit(_intuitToken);\n        deadline = block.timestamp + 72 hours; // 3 days for staking period\n    }\n    \n    /* ========== MODIFIERS ========== */\n    \n    modifier notCompleted() {\n        require(!stakingCompleted, \"IntuitStaker: staking already completed\");\n        _;\n    }\n    \n    modifier afterDeadline() {\n        require(block.timestamp >= deadline, \"IntuitStaker: deadline not reached\");\n        _;\n    }\n    \n    modifier beforeDeadline() {\n        require(block.timestamp < deadline, \"IntuitStaker: deadline passed\");\n        _;\n    }\n    \n    /* ========== STAKING FUNCTIONS ========== */\n    \n    /**\n     * @dev Stake INTUIT tokens\n     */\n    function stake(uint256 amount) external beforeDeadline notCompleted {\n        require(amount > 0, \"IntuitStaker: cannot stake 0\");\n        \n        // Transfer tokens from user\n        require(\n            intuitToken.transferFrom(msg.sender, address(this), amount),\n            \"IntuitStaker: transfer failed\"\n        );\n        \n        // Update balances\n        balances[msg.sender] += amount;\n        totalStaked += amount;\n        stakeTimestamp[msg.sender] = block.timestamp;\n        \n        emit Stake(msg.sender, amount, block.timestamp);\n    }\n    \n    /**\n     * @dev Execute staking outcome after deadline\n     */\n    function execute() external afterDeadline notCompleted {\n        stakingCompleted = true;\n        \n        if (totalStaked >= THRESHOLD) {\n            // Success! Distribute rewards\n            _distributeRewards();\n            emit Execute(true, totalStaked);\n        } else {\n            // Failed to meet threshold - allow withdrawals\n            openForWithdraw = true;\n            emit Execute(false, totalStaked);\n        }\n    }\n    \n    /**\n     * @dev Unstake tokens (with potential fee if early)\n     */\n    function unstake(uint256 amount) external {\n        require(amount > 0, \"IntuitStaker: cannot unstake 0\");\n        require(balances[msg.sender] >= amount, \"IntuitStaker: insufficient balance\");\n        \n        uint256 fee = 0;\n        \n        // Early unstaking fee if within lock period and staking was successful\n        if (stakingCompleted && \n            block.timestamp < stakeTimestamp[msg.sender] + LOCK_PERIOD) {\n            fee = (amount * EARLY_UNSTAKE_FEE) / 1000;\n        }\n        \n        uint256 amountAfterFee = amount - fee;\n        \n        // Update balances\n        balances[msg.sender] -= amount;\n        totalStaked -= amount;\n        \n        // Add fee to reward pool for future stakers\n        if (fee > 0) {\n            rewardPool += fee;\n        }\n        \n        // Transfer tokens back to user\n        require(\n            intuitToken.transfer(msg.sender, amountAfterFee),\n            \"IntuitStaker: transfer failed\"\n        );\n        \n        emit Unstake(msg.sender, amount, fee);\n    }\n    \n    /**\n     * @dev Withdraw stake if threshold wasn't met\n     */\n    function withdraw() external {\n        require(openForWithdraw, \"IntuitStaker: withdrawals not open\");\n        require(balances[msg.sender] > 0, \"IntuitStaker: no balance to withdraw\");\n        \n        uint256 amount = balances[msg.sender];\n        balances[msg.sender] = 0;\n        totalStaked -= amount;\n        \n        require(\n            intuitToken.transfer(msg.sender, amount),\n            \"IntuitStaker: transfer failed\"\n        );\n        \n        emit Withdraw(msg.sender, amount);\n    }\n    \n    /**\n     * @dev Claim earned rewards\n     */\n    function claimRewards() external {\n        require(stakingCompleted, \"IntuitStaker: staking not completed\");\n        require(rewards[msg.sender] > 0, \"IntuitStaker: no rewards to claim\");\n        \n        uint256 reward = rewards[msg.sender];\n        rewards[msg.sender] = 0;\n        \n        require(\n            intuitToken.transfer(msg.sender, reward),\n            \"IntuitStaker: reward transfer failed\"\n        );\n    }\n    \n    /* ========== ADMIN FUNCTIONS ========== */\n    \n    /**\n     * @dev Fund the reward pool (called by DEX contract from trading fees)\n     */\n    function fundRewardPool(uint256 amount) external {\n        require(\n            intuitToken.transferFrom(msg.sender, address(this), amount),\n            \"IntuitStaker: funding transfer failed\"\n        );\n        \n        rewardPool += amount;\n        emit RewardPoolFunded(amount);\n    }\n    \n    /* ========== INTERNAL FUNCTIONS ========== */\n    \n    /**\n     * @dev Distribute rewards proportionally to all stakers\n     */\n    function _distributeRewards() internal {\n        if (rewardPool == 0 || totalStaked == 0) return;\n        \n        // Calculate total rewards to distribute\n        uint256 totalRewards = rewardPool;\n        \n        // This would need to iterate through all stakers\n        // For gas efficiency, we'll calculate rewards on-demand in claimRewards\n        // For now, we'll store the reward pool amount for proportional distribution\n        \n        emit RewardsDistributed(totalRewards, totalStaked);\n    }\n    \n    /* ========== VIEW FUNCTIONS ========== */\n    \n    /**\n     * @dev Get time left until deadline\n     */\n    function timeLeft() external view returns (uint256) {\n        if (block.timestamp >= deadline) {\n            return 0;\n        }\n        return deadline - block.timestamp;\n    }\n    \n    /**\n     * @dev Get user's current stake info\n     */\n    function getUserStakeInfo(address user) external view returns (\n        uint256 stakedAmount,\n        uint256 stakeTime,\n        uint256 pendingRewards,\n        bool canUnstakeWithoutFee\n    ) {\n        stakedAmount = balances[user];\n        stakeTime = stakeTimestamp[user];\n        \n        // Calculate pending rewards\n        if (stakingCompleted && totalStaked >= THRESHOLD && stakedAmount > 0) {\n            pendingRewards = (rewardPool * stakedAmount) / totalStaked;\n        }\n        \n        canUnstakeWithoutFee = !stakingCompleted || \n                              (block.timestamp >= stakeTime + LOCK_PERIOD);\n        \n        return (stakedAmount, stakeTime, pendingRewards, canUnstakeWithoutFee);\n    }\n    \n    /**\n     * @dev Get staking contract status\n     */\n    function getStakingStatus() external view returns (\n        uint256 currentStaked,\n        uint256 thresholdAmount,\n        uint256 timeRemaining,\n        bool isCompleted,\n        bool withdrawalsOpen,\n        uint256 currentRewardPool\n    ) {\n        return (\n            totalStaked,\n            THRESHOLD,\n            this.timeLeft(),\n            stakingCompleted,\n            openForWithdraw,\n            rewardPool\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}