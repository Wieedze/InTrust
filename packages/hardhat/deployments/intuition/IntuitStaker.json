{
  "address": "0x59b670e9fA9D0A427751Af201D676719a970857b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_intuitToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        }
      ],
      "name": "Execute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardPoolFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStakers",
          "type": "uint256"
        }
      ],
      "name": "RewardsDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EARLY_UNSTAKE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCK_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fundRewardPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeRemaining",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isCompleted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "withdrawalsOpen",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "currentRewardPool",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserStakeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "canUnstakeWithoutFee",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "intuitToken",
      "outputs": [
        {
          "internalType": "contract Intuit",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openForWithdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakeTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingCompleted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xddf17f0aaf61d4482f9dbadb17525151b2489963f03da499f6ba43f52ed1eeb5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x59b670e9fA9D0A427751Af201D676719a970857b",
    "transactionIndex": 1,
    "gasUsed": "1023841",
    "logsBloom": "0x
    "blockHash": "0x00a27788b680ee4705b3a44895e0492f7279a4180e4b00914abc03bc1cebc5fb",
    "transactionHash": "0xddf17f0aaf61d4482f9dbadb17525151b2489963f03da499f6ba43f52ed1eeb5",
    "logs": [],
    "blockNumber": 529245,
    "cumulativeGasUsed": "1023841",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c"
  ],
  "numDeployments": 1,
  "solcInputHash": "f6b868a9fa6e25a062fd2266168ce170",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_intuitToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"Execute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPoolFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakers\",\"type\":\"uint256\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EARLY_UNSTAKE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeRemaining\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawalsOpen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currentRewardPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canUnstakeWithoutFee\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intuitToken\",\"outputs\":[{\"internalType\":\"contract Intuit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openForWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Decentralized staking contract for INTUIT tokens with collective goals  Features: - Stake INTUIT tokens to earn rewards - Collective threshold - if reached, rewards are distributed - If threshold not met, users can withdraw their stakes - Integrates with existing INTUIT token ecosystem\",\"kind\":\"dev\",\"methods\":{\"claimRewards()\":{\"details\":\"Claim earned rewards\"},\"execute()\":{\"details\":\"Execute staking outcome after deadline\"},\"fundRewardPool(uint256)\":{\"details\":\"Fund the reward pool (called by DEX contract from trading fees)\"},\"getStakingStatus()\":{\"details\":\"Get staking contract status\"},\"getUserStakeInfo(address)\":{\"details\":\"Get user's current stake info\"},\"stake(uint256)\":{\"details\":\"Stake INTUIT tokens\"},\"timeLeft()\":{\"details\":\"Get time left until deadline\"},\"unstake(uint256)\":{\"details\":\"Unstake tokens (with potential fee if early)\"},\"withdraw()\":{\"details\":\"Withdraw stake if threshold wasn't met\"}},\"title\":\"IntuitStaker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IntuitStaker.sol\":\"IntuitStaker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/Intuit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title INTUIT Token\\n * @dev Professional ERC20 token with 1M fixed supply\\n * Native-style token for INTUITION Network DEX\\n */\\ncontract Intuit is ERC20 {\\n    \\n    /* ========== STATE VARIABLES ========== */\\n    \\n    uint256 public constant TOTAL_SUPPLY = 1_000_000 * 10**18; // 1M tokens\\n    \\n    /* ========== EVENTS ========== */\\n    \\n    event TokensDeployed(address indexed deployer, uint256 totalSupply);\\n    \\n    /* ========== CONSTRUCTOR ========== */\\n    \\n    constructor() ERC20(\\\"INTUIT\\\", \\\"INTUIT\\\") {\\n        // Mint 1M tokens to deployer\\n        _mint(msg.sender, TOTAL_SUPPLY);\\n        emit TokensDeployed(msg.sender, TOTAL_SUPPLY);\\n    }\\n    \\n    /* ========== VIEW FUNCTIONS ========== */\\n    \\n    /**\\n     * @dev Returns the total supply constant\\n     */\\n    function getTotalSupply() external pure returns (uint256) {\\n        return TOTAL_SUPPLY;\\n    }\\n    \\n    /**\\n     * @dev Returns token information\\n     */\\n    function getTokenInfo() external pure returns (\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint256 tokenSupply,\\n        uint8 tokenDecimals\\n    ) {\\n        return (\\\"INTUIT\\\", \\\"INTUIT\\\", TOTAL_SUPPLY, 18);\\n    }\\n}\\n\",\"keccak256\":\"0x4a457085da481419b92218139314ef9d03d1e3b4db60e77c12989bf995b382a4\",\"license\":\"MIT\"},\"contracts/IntuitStaker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Intuit.sol\\\";\\n\\n/**\\n * @title IntuitStaker\\n * @dev Decentralized staking contract for INTUIT tokens with collective goals\\n * \\n * Features:\\n * - Stake INTUIT tokens to earn rewards\\n * - Collective threshold - if reached, rewards are distributed\\n * - If threshold not met, users can withdraw their stakes\\n * - Integrates with existing INTUIT token ecosystem\\n */\\ncontract IntuitStaker {\\n    \\n    /* ========== STATE VARIABLES ========== */\\n    \\n    Intuit public immutable intuitToken;\\n    \\n    // Staking parameters\\n    uint256 public constant THRESHOLD = 10000 ether; // 10,000 INTUIT tokens needed\\n    uint256 public constant REWARD_RATE = 125; // 12.5% APY (125/1000)\\n    uint256 public constant LOCK_PERIOD = 7 days;\\n    uint256 public constant EARLY_UNSTAKE_FEE = 20; // 2% (20/1000)\\n    \\n    uint256 public deadline;\\n    uint256 public totalStaked;\\n    bool public stakingCompleted;\\n    bool public openForWithdraw;\\n    \\n    // User data\\n    mapping(address => uint256) public balances;\\n    mapping(address => uint256) public stakeTimestamp;\\n    mapping(address => uint256) public rewards;\\n    \\n    // Reward pool (funded by trading fees from DEX)\\n    uint256 public rewardPool;\\n    \\n    /* ========== EVENTS ========== */\\n    \\n    event Stake(address indexed staker, uint256 amount, uint256 timestamp);\\n    event Unstake(address indexed staker, uint256 amount, uint256 fee);\\n    event RewardsDistributed(uint256 totalRewards, uint256 totalStakers);\\n    event Withdraw(address indexed staker, uint256 amount);\\n    event Execute(bool success, uint256 totalStaked);\\n    event RewardPoolFunded(uint256 amount);\\n    \\n    /* ========== CONSTRUCTOR ========== */\\n    \\n    constructor(address _intuitToken) {\\n        require(_intuitToken != address(0), \\\"IntuitStaker: invalid token address\\\");\\n        intuitToken = Intuit(_intuitToken);\\n        deadline = block.timestamp + 72 hours; // 3 days for staking period\\n    }\\n    \\n    /* ========== MODIFIERS ========== */\\n    \\n    modifier notCompleted() {\\n        require(!stakingCompleted, \\\"IntuitStaker: staking already completed\\\");\\n        _;\\n    }\\n    \\n    modifier afterDeadline() {\\n        require(block.timestamp >= deadline, \\\"IntuitStaker: deadline not reached\\\");\\n        _;\\n    }\\n    \\n    modifier beforeDeadline() {\\n        require(block.timestamp < deadline, \\\"IntuitStaker: deadline passed\\\");\\n        _;\\n    }\\n    \\n    /* ========== STAKING FUNCTIONS ========== */\\n    \\n    /**\\n     * @dev Stake INTUIT tokens\\n     */\\n    function stake(uint256 amount) external beforeDeadline notCompleted {\\n        require(amount > 0, \\\"IntuitStaker: cannot stake 0\\\");\\n        \\n        // Transfer tokens from user\\n        require(\\n            intuitToken.transferFrom(msg.sender, address(this), amount),\\n            \\\"IntuitStaker: transfer failed\\\"\\n        );\\n        \\n        // Update balances\\n        balances[msg.sender] += amount;\\n        totalStaked += amount;\\n        stakeTimestamp[msg.sender] = block.timestamp;\\n        \\n        emit Stake(msg.sender, amount, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Execute staking outcome after deadline\\n     */\\n    function execute() external afterDeadline notCompleted {\\n        stakingCompleted = true;\\n        \\n        if (totalStaked >= THRESHOLD) {\\n            // Success! Distribute rewards\\n            _distributeRewards();\\n            emit Execute(true, totalStaked);\\n        } else {\\n            // Failed to meet threshold - allow withdrawals\\n            openForWithdraw = true;\\n            emit Execute(false, totalStaked);\\n        }\\n    }\\n    \\n    /**\\n     * @dev Unstake tokens (with potential fee if early)\\n     */\\n    function unstake(uint256 amount) external {\\n        require(amount > 0, \\\"IntuitStaker: cannot unstake 0\\\");\\n        require(balances[msg.sender] >= amount, \\\"IntuitStaker: insufficient balance\\\");\\n        \\n        uint256 fee = 0;\\n        \\n        // Early unstaking fee if within lock period and staking was successful\\n        if (stakingCompleted && \\n            block.timestamp < stakeTimestamp[msg.sender] + LOCK_PERIOD) {\\n            fee = (amount * EARLY_UNSTAKE_FEE) / 1000;\\n        }\\n        \\n        uint256 amountAfterFee = amount - fee;\\n        \\n        // Update balances\\n        balances[msg.sender] -= amount;\\n        totalStaked -= amount;\\n        \\n        // Add fee to reward pool for future stakers\\n        if (fee > 0) {\\n            rewardPool += fee;\\n        }\\n        \\n        // Transfer tokens back to user\\n        require(\\n            intuitToken.transfer(msg.sender, amountAfterFee),\\n            \\\"IntuitStaker: transfer failed\\\"\\n        );\\n        \\n        emit Unstake(msg.sender, amount, fee);\\n    }\\n    \\n    /**\\n     * @dev Withdraw stake if threshold wasn't met\\n     */\\n    function withdraw() external {\\n        require(openForWithdraw, \\\"IntuitStaker: withdrawals not open\\\");\\n        require(balances[msg.sender] > 0, \\\"IntuitStaker: no balance to withdraw\\\");\\n        \\n        uint256 amount = balances[msg.sender];\\n        balances[msg.sender] = 0;\\n        totalStaked -= amount;\\n        \\n        require(\\n            intuitToken.transfer(msg.sender, amount),\\n            \\\"IntuitStaker: transfer failed\\\"\\n        );\\n        \\n        emit Withdraw(msg.sender, amount);\\n    }\\n    \\n    /**\\n     * @dev Claim earned rewards\\n     */\\n    function claimRewards() external {\\n        require(stakingCompleted, \\\"IntuitStaker: staking not completed\\\");\\n        require(rewards[msg.sender] > 0, \\\"IntuitStaker: no rewards to claim\\\");\\n        \\n        uint256 reward = rewards[msg.sender];\\n        rewards[msg.sender] = 0;\\n        \\n        require(\\n            intuitToken.transfer(msg.sender, reward),\\n            \\\"IntuitStaker: reward transfer failed\\\"\\n        );\\n    }\\n    \\n    /* ========== ADMIN FUNCTIONS ========== */\\n    \\n    /**\\n     * @dev Fund the reward pool (called by DEX contract from trading fees)\\n     */\\n    function fundRewardPool(uint256 amount) external {\\n        require(\\n            intuitToken.transferFrom(msg.sender, address(this), amount),\\n            \\\"IntuitStaker: funding transfer failed\\\"\\n        );\\n        \\n        rewardPool += amount;\\n        emit RewardPoolFunded(amount);\\n    }\\n    \\n    /* ========== INTERNAL FUNCTIONS ========== */\\n    \\n    /**\\n     * @dev Distribute rewards proportionally to all stakers\\n     */\\n    function _distributeRewards() internal {\\n        if (rewardPool == 0 || totalStaked == 0) return;\\n        \\n        // Calculate total rewards to distribute\\n        uint256 totalRewards = rewardPool;\\n        \\n        // This would need to iterate through all stakers\\n        // For gas efficiency, we'll calculate rewards on-demand in claimRewards\\n        // For now, we'll store the reward pool amount for proportional distribution\\n        \\n        emit RewardsDistributed(totalRewards, totalStaked);\\n    }\\n    \\n    /* ========== VIEW FUNCTIONS ========== */\\n    \\n    /**\\n     * @dev Get time left until deadline\\n     */\\n    function timeLeft() external view returns (uint256) {\\n        if (block.timestamp >= deadline) {\\n            return 0;\\n        }\\n        return deadline - block.timestamp;\\n    }\\n    \\n    /**\\n     * @dev Get user's current stake info\\n     */\\n    function getUserStakeInfo(address user) external view returns (\\n        uint256 stakedAmount,\\n        uint256 stakeTime,\\n        uint256 pendingRewards,\\n        bool canUnstakeWithoutFee\\n    ) {\\n        stakedAmount = balances[user];\\n        stakeTime = stakeTimestamp[user];\\n        \\n        // Calculate pending rewards\\n        if (stakingCompleted && totalStaked >= THRESHOLD && stakedAmount > 0) {\\n            pendingRewards = (rewardPool * stakedAmount) / totalStaked;\\n        }\\n        \\n        canUnstakeWithoutFee = !stakingCompleted || \\n                              (block.timestamp >= stakeTime + LOCK_PERIOD);\\n        \\n        return (stakedAmount, stakeTime, pendingRewards, canUnstakeWithoutFee);\\n    }\\n    \\n    /**\\n     * @dev Get staking contract status\\n     */\\n    function getStakingStatus() external view returns (\\n        uint256 currentStaked,\\n        uint256 thresholdAmount,\\n        uint256 timeRemaining,\\n        bool isCompleted,\\n        bool withdrawalsOpen,\\n        uint256 currentRewardPool\\n    ) {\\n        return (\\n            totalStaked,\\n            THRESHOLD,\\n            this.timeLeft(),\\n            stakingCompleted,\\n            openForWithdraw,\\n            rewardPool\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xbfc23acd21b705b374d047a1734d59f105ef15b32cab9832b3d204a18a4c94c4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161126538038061126583398101604081905261002f916100b8565b6001600160a01b0381166100955760405162461bcd60e51b815260206004820152602360248201527f496e747569745374616b65723a20696e76616c696420746f6b656e206164647260448201526265737360e81b606482015260840160405180910390fd5b6001600160a01b0381166080526100af426203f4806100e8565b6000555061010f565b6000602082840312156100ca57600080fd5b81516001600160a01b03811681146100e157600080fd5b9392505050565b8082018082111561010957634e487b7160e01b600052601160045260246000fd5b92915050565b60805161111861014d600039600081816102fd0152818161037c0152818161063101528181610800015281816109db0152610cbf01526111186000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806361461954116100b85780639876a6431161007c5780639876a64314610248578063a694fc3a1461026a578063c32d3ae21461027d578063cab9b8fb146102b2578063d67b74a0146102eb578063dcc1673d146102f857600080fd5b806361461954146101fd57806366666aa914610205578063702590771461020e578063785ffb371461022e578063817b1cd21461023f57600080fd5b806329dcb0cf1161010a57806329dcb0cf146101c15780632e17de78146101ca578063372500ab146101dd57806339efdf6b146101e55780633ccfd60b146101ed5780635997bb37146101f557600080fd5b80630700037d146101475780631300a6d11461017a5780631820cabb146101825780631d583e0d1461018c57806327e235e3146101a1575b600080fd5b610167610155366004610f65565b60056020526000908152604090205481565b6040519081526020015b60405180910390f35b610167610337565b61016762093a8081565b61019f61019a366004610f95565b61035a565b005b6101676101af366004610f65565b60036020526000908152604090205481565b61016760005481565b61019f6101d8366004610f95565b61049e565b61019f610702565b610167601481565b61019f6108c8565b610167607d81565b61019f610aa5565b61016760065481565b61016761021c366004610f65565b60046020526000908152604090205481565b61016769021e19e0c9bab240000081565b61016760015481565b60025461025a90610100900460ff1681565b6040519015158152602001610171565b61019f610278366004610f95565b610bd9565b61029061028b366004610f65565b610dd6565b6040805194855260208501939093529183015215156060820152608001610171565b6102ba610e74565b60408051968752602087019590955293850192909252151560608401521515608083015260a082015260c001610171565b60025461025a9060ff1681565b61031f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610171565b6000805442106103475750600090565b426000546103559190610fc4565b905090565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af11580156103cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f19190610fdd565b6104505760405162461bcd60e51b815260206004820152602560248201527f496e747569745374616b65723a2066756e64696e67207472616e736665722066604482015264185a5b195960da1b60648201526084015b60405180910390fd5b80600660008282546104629190610fff565b90915550506040518181527fb1d234dd8081b3e00565c8b359ca6fa117fc7b024f75d85b6830b190bef5c76b906020015b60405180910390a150565b600081116104ee5760405162461bcd60e51b815260206004820152601e60248201527f496e747569745374616b65723a2063616e6e6f7420756e7374616b65203000006044820152606401610447565b336000908152600360205260409020548111156105585760405162461bcd60e51b815260206004820152602260248201527f496e747569745374616b65723a20696e73756666696369656e742062616c616e604482015261636560f01b6064820152608401610447565b60025460009060ff1680156105895750336000908152600460205260409020546105869062093a8090610fff565b42105b156105a9576103e861059c601484611012565b6105a69190611029565b90505b60006105b58284610fc4565b336000908152600360205260408120805492935085929091906105d9908490610fc4565b9250508190555082600160008282546105f29190610fc4565b9091555050811561061557816006600082825461060f9190610fff565b90915550505b60405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a69190610fdd565b6106c25760405162461bcd60e51b81526004016104479061104b565b604080518481526020810184905233917ff960dbf9e5d0682f7a298ed974e33a28b4464914b7a2bfac12ae419a9afeb280910160405180910390a2505050565b60025460ff166107605760405162461bcd60e51b815260206004820152602360248201527f496e747569745374616b65723a207374616b696e67206e6f7420636f6d706c656044820152621d195960ea1b6064820152608401610447565b336000908152600560205260409020546107c65760405162461bcd60e51b815260206004820152602160248201527f496e747569745374616b65723a206e6f207265776172647320746f20636c61696044820152606d60f81b6064820152608401610447565b3360008181526005602052604080822080549290555163a9059cbb60e01b8152600481019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086d9190610fdd565b6108c55760405162461bcd60e51b8152602060048201526024808201527f496e747569745374616b65723a20726577617264207472616e736665722066616044820152631a5b195960e21b6064820152608401610447565b50565b600254610100900460ff1661092a5760405162461bcd60e51b815260206004820152602260248201527f496e747569745374616b65723a207769746864726177616c73206e6f74206f7060448201526132b760f11b6064820152608401610447565b336000908152600360205260409020546109925760405162461bcd60e51b8152602060048201526024808201527f496e747569745374616b65723a206e6f2062616c616e636520746f20776974686044820152636472617760e01b6064820152608401610447565b33600090815260036020526040812080549082905560018054919283926109ba908490610fc4565b909155505060405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a509190610fdd565b610a6c5760405162461bcd60e51b81526004016104479061104b565b60405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020015b60405180910390a250565b600054421015610b025760405162461bcd60e51b815260206004820152602260248201527f496e747569745374616b65723a20646561646c696e65206e6f74207265616368604482015261195960f21b6064820152608401610447565b60025460ff1615610b255760405162461bcd60e51b815260040161044790611082565b6002805460ff191660019081179091555469021e19e0c9bab240000011610b8f57610b4e610f12565b600180546040805192835260208301919091527fc1e8f58bf1874172646c1654886e717826133812a5cf2377042736e5ee1788dc91015b60405180910390a1565b6002805461ff001916610100179055600154604080516000815260208101929092527fc1e8f58bf1874172646c1654886e717826133812a5cf2377042736e5ee1788dc9101610b85565b6000544210610c2a5760405162461bcd60e51b815260206004820152601d60248201527f496e747569745374616b65723a20646561646c696e65207061737365640000006044820152606401610447565b60025460ff1615610c4d5760405162461bcd60e51b815260040161044790611082565b60008111610c9d5760405162461bcd60e51b815260206004820152601c60248201527f496e747569745374616b65723a2063616e6e6f74207374616b652030000000006044820152606401610447565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d349190610fdd565b610d505760405162461bcd60e51b81526004016104479061104b565b3360009081526003602052604081208054839290610d6f908490610fff565b925050819055508060016000828254610d889190610fff565b90915550503360008181526004602090815260409182902042908190558251858152918201527f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b69101610a9a565b6001600160a01b038116600090815260036020908152604080832054600490925282205460025491929091819060ff168015610e1e575069021e19e0c9bab240000060015410155b8015610e2a5750600084115b15610e4d5760015484600654610e409190611012565b610e4a9190611029565b91505b60025460ff161580610e6b5750610e6762093a8084610fff565b4210155b90509193509193565b60008060008060008060015469021e19e0c9bab2400000306001600160a01b0316631300a6d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed91906110c9565b600254600654939a92995090975060ff80821697506101009091041694509092509050565b6006541580610f215750600154155b15610f2857565b6006546001546040805183815260208101929092527f29e98ba00d07f171959c4ddcd2f3020debc7c52cf537a034d7e664340d098c6c9101610493565b600060208284031215610f7757600080fd5b81356001600160a01b0381168114610f8e57600080fd5b9392505050565b600060208284031215610fa757600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610fd757610fd7610fae565b92915050565b600060208284031215610fef57600080fd5b81518015158114610f8e57600080fd5b80820180821115610fd757610fd7610fae565b8082028115828204841417610fd757610fd7610fae565b60008261104657634e487b7160e01b600052601260045260246000fd5b500490565b6020808252601d908201527f496e747569745374616b65723a207472616e73666572206661696c6564000000604082015260600190565b60208082526027908201527f496e747569745374616b65723a207374616b696e6720616c726561647920636f6040820152661b5c1b195d195960ca1b606082015260800190565b6000602082840312156110db57600080fd5b505191905056fea2646970667358221220cc174ba3be974bb4924dc8241ac6747aa85dda9a0e4853656520d0d172816e8064736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c806361461954116100b85780639876a6431161007c5780639876a64314610248578063a694fc3a1461026a578063c32d3ae21461027d578063cab9b8fb146102b2578063d67b74a0146102eb578063dcc1673d146102f857600080fd5b806361461954146101fd57806366666aa914610205578063702590771461020e578063785ffb371461022e578063817b1cd21461023f57600080fd5b806329dcb0cf1161010a57806329dcb0cf146101c15780632e17de78146101ca578063372500ab146101dd57806339efdf6b146101e55780633ccfd60b146101ed5780635997bb37146101f557600080fd5b80630700037d146101475780631300a6d11461017a5780631820cabb146101825780631d583e0d1461018c57806327e235e3146101a1575b600080fd5b610167610155366004610f65565b60056020526000908152604090205481565b6040519081526020015b60405180910390f35b610167610337565b61016762093a8081565b61019f61019a366004610f95565b61035a565b005b6101676101af366004610f65565b60036020526000908152604090205481565b61016760005481565b61019f6101d8366004610f95565b61049e565b61019f610702565b610167601481565b61019f6108c8565b610167607d81565b61019f610aa5565b61016760065481565b61016761021c366004610f65565b60046020526000908152604090205481565b61016769021e19e0c9bab240000081565b61016760015481565b60025461025a90610100900460ff1681565b6040519015158152602001610171565b61019f610278366004610f95565b610bd9565b61029061028b366004610f65565b610dd6565b6040805194855260208501939093529183015215156060820152608001610171565b6102ba610e74565b60408051968752602087019590955293850192909252151560608401521515608083015260a082015260c001610171565b60025461025a9060ff1681565b61031f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610171565b6000805442106103475750600090565b426000546103559190610fc4565b905090565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af11580156103cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f19190610fdd565b6104505760405162461bcd60e51b815260206004820152602560248201527f496e747569745374616b65723a2066756e64696e67207472616e736665722066604482015264185a5b195960da1b60648201526084015b60405180910390fd5b80600660008282546104629190610fff565b90915550506040518181527fb1d234dd8081b3e00565c8b359ca6fa117fc7b024f75d85b6830b190bef5c76b906020015b60405180910390a150565b600081116104ee5760405162461bcd60e51b815260206004820152601e60248201527f496e747569745374616b65723a2063616e6e6f7420756e7374616b65203000006044820152606401610447565b336000908152600360205260409020548111156105585760405162461bcd60e51b815260206004820152602260248201527f496e747569745374616b65723a20696e73756666696369656e742062616c616e604482015261636560f01b6064820152608401610447565b60025460009060ff1680156105895750336000908152600460205260409020546105869062093a8090610fff565b42105b156105a9576103e861059c601484611012565b6105a69190611029565b90505b60006105b58284610fc4565b336000908152600360205260408120805492935085929091906105d9908490610fc4565b9250508190555082600160008282546105f29190610fc4565b9091555050811561061557816006600082825461060f9190610fff565b90915550505b60405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a69190610fdd565b6106c25760405162461bcd60e51b81526004016104479061104b565b604080518481526020810184905233917ff960dbf9e5d0682f7a298ed974e33a28b4464914b7a2bfac12ae419a9afeb280910160405180910390a2505050565b60025460ff166107605760405162461bcd60e51b815260206004820152602360248201527f496e747569745374616b65723a207374616b696e67206e6f7420636f6d706c656044820152621d195960ea1b6064820152608401610447565b336000908152600560205260409020546107c65760405162461bcd60e51b815260206004820152602160248201527f496e747569745374616b65723a206e6f207265776172647320746f20636c61696044820152606d60f81b6064820152608401610447565b3360008181526005602052604080822080549290555163a9059cbb60e01b8152600481019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086d9190610fdd565b6108c55760405162461bcd60e51b8152602060048201526024808201527f496e747569745374616b65723a20726577617264207472616e736665722066616044820152631a5b195960e21b6064820152608401610447565b50565b600254610100900460ff1661092a5760405162461bcd60e51b815260206004820152602260248201527f496e747569745374616b65723a207769746864726177616c73206e6f74206f7060448201526132b760f11b6064820152608401610447565b336000908152600360205260409020546109925760405162461bcd60e51b8152602060048201526024808201527f496e747569745374616b65723a206e6f2062616c616e636520746f20776974686044820152636472617760e01b6064820152608401610447565b33600090815260036020526040812080549082905560018054919283926109ba908490610fc4565b909155505060405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a509190610fdd565b610a6c5760405162461bcd60e51b81526004016104479061104b565b60405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020015b60405180910390a250565b600054421015610b025760405162461bcd60e51b815260206004820152602260248201527f496e747569745374616b65723a20646561646c696e65206e6f74207265616368604482015261195960f21b6064820152608401610447565b60025460ff1615610b255760405162461bcd60e51b815260040161044790611082565b6002805460ff191660019081179091555469021e19e0c9bab240000011610b8f57610b4e610f12565b600180546040805192835260208301919091527fc1e8f58bf1874172646c1654886e717826133812a5cf2377042736e5ee1788dc91015b60405180910390a1565b6002805461ff001916610100179055600154604080516000815260208101929092527fc1e8f58bf1874172646c1654886e717826133812a5cf2377042736e5ee1788dc9101610b85565b6000544210610c2a5760405162461bcd60e51b815260206004820152601d60248201527f496e747569745374616b65723a20646561646c696e65207061737365640000006044820152606401610447565b60025460ff1615610c4d5760405162461bcd60e51b815260040161044790611082565b60008111610c9d5760405162461bcd60e51b815260206004820152601c60248201527f496e747569745374616b65723a2063616e6e6f74207374616b652030000000006044820152606401610447565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d349190610fdd565b610d505760405162461bcd60e51b81526004016104479061104b565b3360009081526003602052604081208054839290610d6f908490610fff565b925050819055508060016000828254610d889190610fff565b90915550503360008181526004602090815260409182902042908190558251858152918201527f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b69101610a9a565b6001600160a01b038116600090815260036020908152604080832054600490925282205460025491929091819060ff168015610e1e575069021e19e0c9bab240000060015410155b8015610e2a5750600084115b15610e4d5760015484600654610e409190611012565b610e4a9190611029565b91505b60025460ff161580610e6b5750610e6762093a8084610fff565b4210155b90509193509193565b60008060008060008060015469021e19e0c9bab2400000306001600160a01b0316631300a6d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed91906110c9565b600254600654939a92995090975060ff80821697506101009091041694509092509050565b6006541580610f215750600154155b15610f2857565b6006546001546040805183815260208101929092527f29e98ba00d07f171959c4ddcd2f3020debc7c52cf537a034d7e664340d098c6c9101610493565b600060208284031215610f7757600080fd5b81356001600160a01b0381168114610f8e57600080fd5b9392505050565b600060208284031215610fa757600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610fd757610fd7610fae565b92915050565b600060208284031215610fef57600080fd5b81518015158114610f8e57600080fd5b80820180821115610fd757610fd7610fae565b8082028115828204841417610fd757610fd7610fae565b60008261104657634e487b7160e01b600052601260045260246000fd5b500490565b6020808252601d908201527f496e747569745374616b65723a207472616e73666572206661696c6564000000604082015260600190565b60208082526027908201527f496e747569745374616b65723a207374616b696e6720616c726561647920636f6040820152661b5c1b195d195960ca1b606082015260800190565b6000602082840312156110db57600080fd5b505191905056fea2646970667358221220cc174ba3be974bb4924dc8241ac6747aa85dda9a0e4853656520d0d172816e8064736f6c63430008140033",
  "devdoc": {
    "details": "Decentralized staking contract for INTUIT tokens with collective goals  Features: - Stake INTUIT tokens to earn rewards - Collective threshold - if reached, rewards are distributed - If threshold not met, users can withdraw their stakes - Integrates with existing INTUIT token ecosystem",
    "kind": "dev",
    "methods": {
      "claimRewards()": {
        "details": "Claim earned rewards"
      },
      "execute()": {
        "details": "Execute staking outcome after deadline"
      },
      "fundRewardPool(uint256)": {
        "details": "Fund the reward pool (called by DEX contract from trading fees)"
      },
      "getStakingStatus()": {
        "details": "Get staking contract status"
      },
      "getUserStakeInfo(address)": {
        "details": "Get user's current stake info"
      },
      "stake(uint256)": {
        "details": "Stake INTUIT tokens"
      },
      "timeLeft()": {
        "details": "Get time left until deadline"
      },
      "unstake(uint256)": {
        "details": "Unstake tokens (with potential fee if early)"
      },
      "withdraw()": {
        "details": "Withdraw stake if threshold wasn't met"
      }
    },
    "title": "IntuitStaker",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 874,
        "contract": "contracts/IntuitStaker.sol:IntuitStaker",
        "label": "deadline",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 876,
        "contract": "contracts/IntuitStaker.sol:IntuitStaker",
        "label": "totalStaked",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 878,
        "contract": "contracts/IntuitStaker.sol:IntuitStaker",
        "label": "stakingCompleted",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 880,
        "contract": "contracts/IntuitStaker.sol:IntuitStaker",
        "label": "openForWithdraw",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 884,
        "contract": "contracts/IntuitStaker.sol:IntuitStaker",
        "label": "balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 888,
        "contract": "contracts/IntuitStaker.sol:IntuitStaker",
        "label": "stakeTimestamp",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 892,
        "contract": "contracts/IntuitStaker.sol:IntuitStaker",
        "label": "rewards",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 894,
        "contract": "contracts/IntuitStaker.sol:IntuitStaker",
        "label": "rewardPool",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}