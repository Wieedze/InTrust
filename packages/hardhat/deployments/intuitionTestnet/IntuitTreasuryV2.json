{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_intuitToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "currentOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensReleased",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLIFF_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_ALLOCATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VESTING_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deploymentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReleasableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasuryBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVestingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "released",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releasable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cliffEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingEnd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "intuitToken",
      "outputs": [
        {
          "internalType": "contract Intuit",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "releaseTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8253a096a42d52a74e171a47ad0f24ef0ac230b5457a66be1aa8235614bf135",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 1,
    "gasUsed": "868867",
    "logsBloom": "0x
    "blockHash": "0x54e1a899f3da7b3d93d1e35a729b4f86a8489fc9b613c24c8cfc0ca72ecc64dc",
    "transactionHash": "0xc8253a096a42d52a74e171a47ad0f24ef0ac230b5457a66be1aa8235614bf135",
    "logs": [],
    "blockNumber": 503112,
    "cumulativeGasUsed": "868867",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"
  ],
  "numDeployments": 1,
  "solcInputHash": "ca1c0822d04d6b75fd515bdfdc9eb405",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_intuitToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLIFF_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_ALLOCATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VESTING_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploymentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReleasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intuitToken\",\"outputs\":[{\"internalType\":\"contract Intuit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Treasury contract to hold and manage INTUIT token reserves Professional token management with time-locks and governance\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Accept ownership transfer\"},\"emergencyWithdraw()\":{\"details\":\"Emergency withdraw - only after vesting period ends This is a safety mechanism in case of contract issues\"},\"getReleasableAmount()\":{\"details\":\"Calculate how many tokens are available for release\"},\"getTreasuryBalance()\":{\"details\":\"Get current treasury balance\"},\"getVestingInfo()\":{\"details\":\"Get vesting information\"},\"releaseTokens()\":{\"details\":\"Release vested tokens to owner\"},\"releaseTokens(uint256)\":{\"details\":\"Release specific amount of vested tokens\"},\"transferOwnership(address)\":{\"details\":\"Initiate ownership transfer (2-step process)\"}},\"title\":\"IntuitTreasuryV2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IntuitTreasuryV2.sol\":\"IntuitTreasuryV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/Intuit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title INTUIT Token\\n * @dev Professional ERC20 token with 1M fixed supply\\n * Native-style token for INTUITION Network DEX\\n */\\ncontract Intuit is ERC20 {\\n    \\n    /* ========== STATE VARIABLES ========== */\\n    \\n    uint256 public constant TOTAL_SUPPLY = 1_000_000 * 10**18; // 1M tokens\\n    \\n    /* ========== EVENTS ========== */\\n    \\n    event TokensDeployed(address indexed deployer, uint256 totalSupply);\\n    \\n    /* ========== CONSTRUCTOR ========== */\\n    \\n    constructor() ERC20(\\\"INTUIT\\\", \\\"INTUIT\\\") {\\n        // Mint 1M tokens to deployer\\n        _mint(msg.sender, TOTAL_SUPPLY);\\n        emit TokensDeployed(msg.sender, TOTAL_SUPPLY);\\n    }\\n    \\n    /* ========== VIEW FUNCTIONS ========== */\\n    \\n    /**\\n     * @dev Returns the total supply constant\\n     */\\n    function getTotalSupply() external pure returns (uint256) {\\n        return TOTAL_SUPPLY;\\n    }\\n    \\n    /**\\n     * @dev Returns token information\\n     */\\n    function getTokenInfo() external pure returns (\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint256 tokenSupply,\\n        uint8 tokenDecimals\\n    ) {\\n        return (\\\"INTUIT\\\", \\\"INTUIT\\\", TOTAL_SUPPLY, 18);\\n    }\\n}\\n\",\"keccak256\":\"0x4a457085da481419b92218139314ef9d03d1e3b4db60e77c12989bf995b382a4\",\"license\":\"MIT\"},\"contracts/IntuitTreasuryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Intuit.sol\\\";\\n\\n/**\\n * @title IntuitTreasuryV2\\n * @dev Treasury contract to hold and manage INTUIT token reserves\\n * Professional token management with time-locks and governance\\n */\\ncontract IntuitTreasuryV2 {\\n    \\n    /* ========== STATE VARIABLES ========== */\\n    \\n    Intuit public immutable intuitToken;\\n    address public owner;\\n    address public pendingOwner;\\n    \\n    uint256 public constant TOTAL_ALLOCATION = 850_000 * 10**18; // 85% of 1M supply\\n    uint256 public releasedAmount;\\n    uint256 public deploymentTime;\\n    \\n    // Vesting schedule\\n    uint256 public constant CLIFF_DURATION = 180 days; // 6 months cliff\\n    uint256 public constant VESTING_DURATION = 4 * 365 days; // 4 years total vesting\\n    \\n    /* ========== EVENTS ========== */\\n    \\n    event TokensReleased(address indexed to, uint256 amount);\\n    event OwnershipTransferInitiated(address indexed currentOwner, address indexed newOwner);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event EmergencyWithdraw(address indexed to, uint256 amount);\\n    \\n    /* ========== MODIFIERS ========== */\\n    \\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Treasury: caller is not the owner\\\");\\n        _;\\n    }\\n    \\n    /* ========== CONSTRUCTOR ========== */\\n    \\n    constructor(address _intuitToken) {\\n        require(_intuitToken != address(0), \\\"Treasury: invalid token address\\\");\\n        intuitToken = Intuit(_intuitToken);\\n        owner = msg.sender;\\n        deploymentTime = block.timestamp;\\n    }\\n    \\n    /* ========== VIEW FUNCTIONS ========== */\\n    \\n    /**\\n     * @dev Calculate how many tokens are available for release\\n     */\\n    function getReleasableAmount() public view returns (uint256) {\\n        if (block.timestamp < deploymentTime + CLIFF_DURATION) {\\n            return 0; // Still in cliff period\\n        }\\n        \\n        uint256 timeElapsed = block.timestamp - deploymentTime;\\n        if (timeElapsed >= VESTING_DURATION) {\\n            return TOTAL_ALLOCATION - releasedAmount; // Fully vested\\n        }\\n        \\n        uint256 vestedAmount = (TOTAL_ALLOCATION * timeElapsed) / VESTING_DURATION;\\n        return vestedAmount - releasedAmount;\\n    }\\n    \\n    /**\\n     * @dev Get current treasury balance\\n     */\\n    function getTreasuryBalance() external view returns (uint256) {\\n        return intuitToken.balanceOf(address(this));\\n    }\\n    \\n    /**\\n     * @dev Get vesting information\\n     */\\n    function getVestingInfo() external view returns (\\n        uint256 totalAllocation,\\n        uint256 released,\\n        uint256 releasable,\\n        uint256 cliffEnd,\\n        uint256 vestingEnd\\n    ) {\\n        return (\\n            TOTAL_ALLOCATION,\\n            releasedAmount,\\n            getReleasableAmount(),\\n            deploymentTime + CLIFF_DURATION,\\n            deploymentTime + VESTING_DURATION\\n        );\\n    }\\n    \\n    /* ========== MAIN FUNCTIONS ========== */\\n    \\n    /**\\n     * @dev Release vested tokens to owner\\n     */\\n    function releaseTokens() external onlyOwner {\\n        uint256 releasableAmount = getReleasableAmount();\\n        require(releasableAmount > 0, \\\"Treasury: no tokens to release\\\");\\n        \\n        releasedAmount += releasableAmount;\\n        require(intuitToken.transfer(owner, releasableAmount), \\\"Treasury: transfer failed\\\");\\n        \\n        emit TokensReleased(owner, releasableAmount);\\n    }\\n    \\n    /**\\n     * @dev Release specific amount of vested tokens\\n     */\\n    function releaseTokens(uint256 amount) external onlyOwner {\\n        uint256 releasableAmount = getReleasableAmount();\\n        require(amount <= releasableAmount, \\\"Treasury: amount exceeds releasable\\\");\\n        require(amount > 0, \\\"Treasury: amount must be greater than 0\\\");\\n        \\n        releasedAmount += amount;\\n        require(intuitToken.transfer(owner, amount), \\\"Treasury: transfer failed\\\");\\n        \\n        emit TokensReleased(owner, amount);\\n    }\\n    \\n    /* ========== GOVERNANCE FUNCTIONS ========== */\\n    \\n    /**\\n     * @dev Initiate ownership transfer (2-step process)\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"Treasury: new owner is the zero address\\\");\\n        require(newOwner != owner, \\\"Treasury: new owner is the current owner\\\");\\n        \\n        pendingOwner = newOwner;\\n        emit OwnershipTransferInitiated(owner, newOwner);\\n    }\\n    \\n    /**\\n     * @dev Accept ownership transfer\\n     */\\n    function acceptOwnership() external {\\n        require(msg.sender == pendingOwner, \\\"Treasury: caller is not the pending owner\\\");\\n        \\n        address previousOwner = owner;\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n        \\n        emit OwnershipTransferred(previousOwner, owner);\\n    }\\n    \\n    /* ========== EMERGENCY FUNCTIONS ========== */\\n    \\n    /**\\n     * @dev Emergency withdraw - only after vesting period ends\\n     * This is a safety mechanism in case of contract issues\\n     */\\n    function emergencyWithdraw() external onlyOwner {\\n        require(\\n            block.timestamp >= deploymentTime + VESTING_DURATION,\\n            \\\"Treasury: emergency withdraw only after vesting ends\\\"\\n        );\\n        \\n        uint256 balance = intuitToken.balanceOf(address(this));\\n        require(balance > 0, \\\"Treasury: no tokens to withdraw\\\");\\n        \\n        require(intuitToken.transfer(owner, balance), \\\"Treasury: emergency transfer failed\\\");\\n        emit EmergencyWithdraw(owner, balance);\\n    }\\n}\\n\",\"keccak256\":\"0x1eafd6ca70fb5a92a759af106dc0d18929fb35a5abfea3c6d3c0e3d1d21f9289\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f06380380610f0683398101604081905261002f916100b0565b6001600160a01b0381166100895760405162461bcd60e51b815260206004820152601f60248201527f54726561737572793a20696e76616c696420746f6b656e206164647265737300604482015260640160405180910390fd5b6001600160a01b0316608052600080546001600160a01b03191633179055426003556100e0565b6000602082840312156100c257600080fd5b81516001600160a01b03811681146100d957600080fd5b9392505050565b608051610de861011e600039600081816101e401528181610370015281816105e10152818161071f015281816108dc01526109ca0152610de86000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063a96f866811610097578063dcc1673d11610066578063dcc1673d146101df578063e30c397814610206578063ecda10f514610219578063f2fde38b1461022257600080fd5b8063a96f866814610195578063b3daa6521461019d578063db2e21bc146101a7578063dc25a300146101af57600080fd5b806379ba5097116100d357806379ba5097146101525780638401b9681461015a5780638da5cb5b146101625780639b5655dc1461018d57600080fd5b80630dac7bea1461010557806345d30a17146101295780634b0babdd146101325780634cfc4d3014610147575b600080fd5b61011669b3fe97a2fafd2f40000081565b6040519081526020015b60405180910390f35b61011660025481565b610145610140366004610c72565b610235565b005b610116630784ce0081565b61014561046d565b610116610533565b600054610175906001600160a01b031681565b6040516001600160a01b039091168152602001610120565b6101166105c9565b610145610659565b61011662ed4e0081565b61014561081c565b6101b7610ad0565b604080519586526020860194909452928401919091526060830152608082015260a001610120565b6101757f000000000000000000000000000000000000000000000000000000000000000081565b600154610175906001600160a01b031681565b61011660035481565b610145610230366004610c8b565b610b22565b6000546001600160a01b031633146102685760405162461bcd60e51b815260040161025f90610cbb565b60405180910390fd5b6000610272610533565b9050808211156102d05760405162461bcd60e51b815260206004820152602360248201527f54726561737572793a20616d6f756e7420657863656564732072656c65617361604482015262626c6560e81b606482015260840161025f565b600082116103305760405162461bcd60e51b815260206004820152602760248201527f54726561737572793a20616d6f756e74206d75737420626520677265617465726044820152660207468616e20360cc1b606482015260840161025f565b81600260008282546103429190610d12565b909155505060005460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af11580156103bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103df9190610d2b565b6104275760405162461bcd60e51b8152602060048201526019602482015278151c99585cdd5c9e4e881d1c985b9cd9995c8819985a5b1959603a1b604482015260640161025f565b6000546040518381526001600160a01b03909116907fc7798891864187665ac6dd119286e44ec13f014527aeeb2b8eb3fd413df931799060200160405180910390a25050565b6001546001600160a01b031633146104d95760405162461bcd60e51b815260206004820152602960248201527f54726561737572793a2063616c6c6572206973206e6f74207468652070656e6460448201526834b7339037bbb732b960b91b606482015260840161025f565b60008054600180546001600160a01b038082166001600160a01b031980861682178755909216909255604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b600062ed4e006003546105469190610d12565b4210156105535750600090565b6000600354426105639190610d4d565b9050630784ce00811061058d576002546105879069b3fe97a2fafd2f400000610d4d565b91505090565b6000630784ce006105a88369b3fe97a2fafd2f400000610d60565b6105b29190610d77565b9050600254816105c29190610d4d565b9250505090565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106549190610d99565b905090565b6000546001600160a01b031633146106835760405162461bcd60e51b815260040161025f90610cbb565b600061068d610533565b9050600081116106df5760405162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e6f20746f6b656e7320746f2072656c656173650000604482015260640161025f565b80600260008282546106f19190610d12565b909155505060005460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af115801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e9190610d2b565b6107d65760405162461bcd60e51b8152602060048201526019602482015278151c99585cdd5c9e4e881d1c985b9cd9995c8819985a5b1959603a1b604482015260640161025f565b6000546040518281526001600160a01b03909116907fc7798891864187665ac6dd119286e44ec13f014527aeeb2b8eb3fd413df93179906020015b60405180910390a250565b6000546001600160a01b031633146108465760405162461bcd60e51b815260040161025f90610cbb565b630784ce006003546108589190610d12565b4210156108c45760405162461bcd60e51b815260206004820152603460248201527f54726561737572793a20656d657267656e6379207769746864726177206f6e6c604482015273792061667465722076657374696e6720656e647360601b606482015260840161025f565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561092b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094f9190610d99565b9050600081116109a15760405162461bcd60e51b815260206004820152601f60248201527f54726561737572793a206e6f20746f6b656e7320746f20776974686472617700604482015260640161025f565b60005460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015610a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a399190610d2b565b610a915760405162461bcd60e51b815260206004820152602360248201527f54726561737572793a20656d657267656e6379207472616e73666572206661696044820152621b195960ea1b606482015260840161025f565b6000546040518281526001600160a01b03909116907f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969590602001610811565b600080600080600069b3fe97a2fafd2f400000600254610aee610533565b62ed4e00600354610aff9190610d12565b630784ce00600354610b119190610d12565b945094509450945094509091929394565b6000546001600160a01b03163314610b4c5760405162461bcd60e51b815260040161025f90610cbb565b6001600160a01b038116610bb25760405162461bcd60e51b815260206004820152602760248201527f54726561737572793a206e6577206f776e657220697320746865207a65726f206044820152666164647265737360c81b606482015260840161025f565b6000546001600160a01b0390811690821603610c215760405162461bcd60e51b815260206004820152602860248201527f54726561737572793a206e6577206f776e657220697320746865206375727265604482015267373a1037bbb732b960c11b606482015260840161025f565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fb150023a879fd806e3599b6ca8ee3b60f0e360ab3846d128d67ebce1a391639a9190a350565b600060208284031215610c8457600080fd5b5035919050565b600060208284031215610c9d57600080fd5b81356001600160a01b0381168114610cb457600080fd5b9392505050565b60208082526021908201527f54726561737572793a2063616c6c6572206973206e6f7420746865206f776e656040820152603960f91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610d2557610d25610cfc565b92915050565b600060208284031215610d3d57600080fd5b81518015158114610cb457600080fd5b81810381811115610d2557610d25610cfc565b8082028115828204841417610d2557610d25610cfc565b600082610d9457634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610dab57600080fd5b505191905056fea264697066735822122076c2607ff1a2122ef8f308abe0ec147566a61d2eac02bdc2e6d9013bd5615ca164736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063a96f866811610097578063dcc1673d11610066578063dcc1673d146101df578063e30c397814610206578063ecda10f514610219578063f2fde38b1461022257600080fd5b8063a96f866814610195578063b3daa6521461019d578063db2e21bc146101a7578063dc25a300146101af57600080fd5b806379ba5097116100d357806379ba5097146101525780638401b9681461015a5780638da5cb5b146101625780639b5655dc1461018d57600080fd5b80630dac7bea1461010557806345d30a17146101295780634b0babdd146101325780634cfc4d3014610147575b600080fd5b61011669b3fe97a2fafd2f40000081565b6040519081526020015b60405180910390f35b61011660025481565b610145610140366004610c72565b610235565b005b610116630784ce0081565b61014561046d565b610116610533565b600054610175906001600160a01b031681565b6040516001600160a01b039091168152602001610120565b6101166105c9565b610145610659565b61011662ed4e0081565b61014561081c565b6101b7610ad0565b604080519586526020860194909452928401919091526060830152608082015260a001610120565b6101757f000000000000000000000000000000000000000000000000000000000000000081565b600154610175906001600160a01b031681565b61011660035481565b610145610230366004610c8b565b610b22565b6000546001600160a01b031633146102685760405162461bcd60e51b815260040161025f90610cbb565b60405180910390fd5b6000610272610533565b9050808211156102d05760405162461bcd60e51b815260206004820152602360248201527f54726561737572793a20616d6f756e7420657863656564732072656c65617361604482015262626c6560e81b606482015260840161025f565b600082116103305760405162461bcd60e51b815260206004820152602760248201527f54726561737572793a20616d6f756e74206d75737420626520677265617465726044820152660207468616e20360cc1b606482015260840161025f565b81600260008282546103429190610d12565b909155505060005460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af11580156103bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103df9190610d2b565b6104275760405162461bcd60e51b8152602060048201526019602482015278151c99585cdd5c9e4e881d1c985b9cd9995c8819985a5b1959603a1b604482015260640161025f565b6000546040518381526001600160a01b03909116907fc7798891864187665ac6dd119286e44ec13f014527aeeb2b8eb3fd413df931799060200160405180910390a25050565b6001546001600160a01b031633146104d95760405162461bcd60e51b815260206004820152602960248201527f54726561737572793a2063616c6c6572206973206e6f74207468652070656e6460448201526834b7339037bbb732b960b91b606482015260840161025f565b60008054600180546001600160a01b038082166001600160a01b031980861682178755909216909255604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b600062ed4e006003546105469190610d12565b4210156105535750600090565b6000600354426105639190610d4d565b9050630784ce00811061058d576002546105879069b3fe97a2fafd2f400000610d4d565b91505090565b6000630784ce006105a88369b3fe97a2fafd2f400000610d60565b6105b29190610d77565b9050600254816105c29190610d4d565b9250505090565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106549190610d99565b905090565b6000546001600160a01b031633146106835760405162461bcd60e51b815260040161025f90610cbb565b600061068d610533565b9050600081116106df5760405162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e6f20746f6b656e7320746f2072656c656173650000604482015260640161025f565b80600260008282546106f19190610d12565b909155505060005460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af115801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e9190610d2b565b6107d65760405162461bcd60e51b8152602060048201526019602482015278151c99585cdd5c9e4e881d1c985b9cd9995c8819985a5b1959603a1b604482015260640161025f565b6000546040518281526001600160a01b03909116907fc7798891864187665ac6dd119286e44ec13f014527aeeb2b8eb3fd413df93179906020015b60405180910390a250565b6000546001600160a01b031633146108465760405162461bcd60e51b815260040161025f90610cbb565b630784ce006003546108589190610d12565b4210156108c45760405162461bcd60e51b815260206004820152603460248201527f54726561737572793a20656d657267656e6379207769746864726177206f6e6c604482015273792061667465722076657374696e6720656e647360601b606482015260840161025f565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561092b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094f9190610d99565b9050600081116109a15760405162461bcd60e51b815260206004820152601f60248201527f54726561737572793a206e6f20746f6b656e7320746f20776974686472617700604482015260640161025f565b60005460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015610a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a399190610d2b565b610a915760405162461bcd60e51b815260206004820152602360248201527f54726561737572793a20656d657267656e6379207472616e73666572206661696044820152621b195960ea1b606482015260840161025f565b6000546040518281526001600160a01b03909116907f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969590602001610811565b600080600080600069b3fe97a2fafd2f400000600254610aee610533565b62ed4e00600354610aff9190610d12565b630784ce00600354610b119190610d12565b945094509450945094509091929394565b6000546001600160a01b03163314610b4c5760405162461bcd60e51b815260040161025f90610cbb565b6001600160a01b038116610bb25760405162461bcd60e51b815260206004820152602760248201527f54726561737572793a206e6577206f776e657220697320746865207a65726f206044820152666164647265737360c81b606482015260840161025f565b6000546001600160a01b0390811690821603610c215760405162461bcd60e51b815260206004820152602860248201527f54726561737572793a206e6577206f776e657220697320746865206375727265604482015267373a1037bbb732b960c11b606482015260840161025f565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fb150023a879fd806e3599b6ca8ee3b60f0e360ab3846d128d67ebce1a391639a9190a350565b600060208284031215610c8457600080fd5b5035919050565b600060208284031215610c9d57600080fd5b81356001600160a01b0381168114610cb457600080fd5b9392505050565b60208082526021908201527f54726561737572793a2063616c6c6572206973206e6f7420746865206f776e656040820152603960f91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610d2557610d25610cfc565b92915050565b600060208284031215610d3d57600080fd5b81518015158114610cb457600080fd5b81810381811115610d2557610d25610cfc565b8082028115828204841417610d2557610d25610cfc565b600082610d9457634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610dab57600080fd5b505191905056fea264697066735822122076c2607ff1a2122ef8f308abe0ec147566a61d2eac02bdc2e6d9013bd5615ca164736f6c63430008140033",
  "devdoc": {
    "details": "Treasury contract to hold and manage INTUIT token reserves Professional token management with time-locks and governance",
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Accept ownership transfer"
      },
      "emergencyWithdraw()": {
        "details": "Emergency withdraw - only after vesting period ends This is a safety mechanism in case of contract issues"
      },
      "getReleasableAmount()": {
        "details": "Calculate how many tokens are available for release"
      },
      "getTreasuryBalance()": {
        "details": "Get current treasury balance"
      },
      "getVestingInfo()": {
        "details": "Get vesting information"
      },
      "releaseTokens()": {
        "details": "Release vested tokens to owner"
      },
      "releaseTokens(uint256)": {
        "details": "Release specific amount of vested tokens"
      },
      "transferOwnership(address)": {
        "details": "Initiate ownership transfer (2-step process)"
      }
    },
    "title": "IntuitTreasuryV2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1589,
        "contract": "contracts/IntuitTreasuryV2.sol:IntuitTreasuryV2",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1591,
        "contract": "contracts/IntuitTreasuryV2.sol:IntuitTreasuryV2",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1600,
        "contract": "contracts/IntuitTreasuryV2.sol:IntuitTreasuryV2",
        "label": "releasedAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1602,
        "contract": "contracts/IntuitTreasuryV2.sol:IntuitTreasuryV2",
        "label": "deploymentTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}